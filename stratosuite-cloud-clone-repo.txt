.gitignore:
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

README.md:
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/6a2d3d19-6750-4c5b-aaa5-e0f50390d84e

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/6a2d3d19-6750-4c5b-aaa5-e0f50390d84e) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/6a2d3d19-6750-4c5b-aaa5-e0f50390d84e) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/features/custom-domain#custom-domain)

components.json:
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

eslint.config.js:
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      "@typescript-eslint/no-unused-vars": "off",
    },
  },
);

index.html:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Stratosuite Cloud - The #1 AI CRM Platform</title>
    <meta name="description" content="Stratosuite Cloud - The #1 AI CRM platform for unified customer experiences, sales automation, and intelligent business solutions." />
    <meta name="author" content="Stratosuite Cloud" />

    <meta property="og:title" content="Stratosuite Cloud - The #1 AI CRM Platform" />
    <meta property="og:description" content="Grow faster and work smarter with Stratosuite Cloud's unified customer platform offering CRM, marketing automation, service desk, and analytics." />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

package.json:
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@tanstack/react-query": "^5.83.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.61.1",
    "react-resizable-panels": "^2.1.9",
    "react-router-dom": "^6.30.1",
    "recharts": "^2.15.4",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.9",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.16.5",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18.3.7",
    "@vitejs/plugin-react-swc": "^3.11.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.32.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^15.15.0",
    "lovable-tagger": "^1.1.10",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.38.0",
    "vite": "^5.4.19"
  }
}

postcss.config.js:
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

src/App.css:
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

src/App.tsx:
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Index from "./pages/Index";
import TryForFree from "./pages/TryForFree";
import WatchDemo from "./pages/WatchDemo";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Index />} />
          <Route path="/try-for-free" element={<TryForFree />} />
          <Route path="/watch-demos" element={<WatchDemo />} />
          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;

src/components/AboutSection.module.css:
.aboutSection {
  background: linear-gradient(135deg, hsl(220 20% 98%) 0%, hsl(var(--background)) 100%);
  padding: 6rem 2rem;
  position: relative;
  overflow: hidden;
}

.aboutContent {
  max-width: 1280px;
  margin: 0 auto;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
}

.aboutLeft {
  padding-right: 2rem;
}

.aboutTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 2rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.aboutDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 1.5rem 0;
}

.aboutLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 600;
}

.aboutLink:hover {
  text-decoration: underline;
}

.aboutHighlight {
  font-weight: 600;
  color: hsl(210 100% 25%);
}

.aboutRight {
  background: var(--gradient-purple);
  border-radius: 1.5rem;
  padding: 2rem;
  color: white;
  position: relative;
  overflow: hidden;
  min-height: 400px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.demoContainer {
  background: white;
  border-radius: 1rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 350px;
  position: relative;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
}

.demoHeader {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
}

.userAvatar {
  width: 3rem;
  height: 3rem;
  background: linear-gradient(135deg, hsl(25 100% 50%), hsl(45 100% 60%));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: white;
}

.userInfo {
  flex: 1;
}

.userName {
  font-weight: bold;
  color: hsl(210 100% 25%);
  margin: 0;
}

.userLocation {
  color: hsl(var(--muted-foreground));
  font-size: 0.875rem;
  margin: 0;
}

.demoStats {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.statBadge {
  background: hsl(45 100% 85%);
  color: hsl(45 100% 30%);
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  font-weight: 600;
}

.roiText {
  background: hsl(var(--primary));
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 2rem;
  font-weight: bold;
  font-size: 1.125rem;
}

.demoChart {
  background: linear-gradient(135deg, hsl(160 100% 90%), hsl(180 100% 95%));
  height: 100px;
  border-radius: 0.5rem;
  position: relative;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.chartLine {
  color: hsl(160 100% 35%);
  font-size: 2rem;
}

.testimonial {
  background: hsl(200 100% 95%);
  padding: 1rem;
  border-radius: 0.75rem;
  font-style: italic;
  color: hsl(200 100% 25%);
  font-size: 0.875rem;
}

.playButtonDemo {
  position: absolute;
  top: 50%;
  right: 2rem;
  transform: translateY(-50%);
  width: 3rem;
  height: 3rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1rem;
  backdrop-filter: blur(10px);
  cursor: pointer;
  transition: var(--transition-smooth);
}

.playButtonDemo:hover {
  transform: translateY(-50%) scale(1.1);
}

.landscape {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 200px;
  background-size: cover;
  background-position: center bottom;
  opacity: 0.1;
  pointer-events: none;
}

@media (max-width: 768px) {
  .aboutContent {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .aboutLeft {
    padding-right: 0;
  }
  
  .aboutTitle {
    font-size: 2rem;
  }
}

src/components/AboutSection.tsx:
import styles from './AboutSection.module.css';
import landscapeImage from '@/assets/landscape-decoration.png';

const AboutSection = () => {
  return (
    <section className={styles.aboutSection}>
      <div 
        className={styles.landscape}
        style={{ backgroundImage: `url(${landscapeImage})` }}
      />
      
      <div className={styles.aboutContent}>
        <div className={styles.aboutLeft}>
          <h2 className={styles.aboutTitle}>What is Stratosuite Cloud?</h2>
          <p className={styles.aboutDescription}>
            Stratosuite Cloud brings together all your data, from any source, so 
            you can act on it with trusted{' '}
            <a href="#" className={styles.aboutLink}>AI</a> and automation, all on one 
            integrated{' '}
            <a href="#" className={styles.aboutLink}>CRM</a> platform. It makes it easy to find more 
            prospects, close more deals, and connect with customers in 
            a whole new way. So it's little wonder{' '}
            <a href="#" className={styles.aboutLink}>Stratosuite Cloud</a> was named{' '}
            <a href="#" className={styles.aboutLink}>the world's #1 CRM</a> for 11 years running.
          </p>
        </div>

        <div className={styles.aboutRight}>
          <div className={styles.demoContainer}>
            <div className={styles.demoHeader}>
              <div className={styles.userAvatar}>LB</div>
              <div className={styles.userInfo}>
                <p className={styles.userName}>Lauren Bailey</p>
                <p className={styles.userLocation}>San Francisco, CA</p>
              </div>
            </div>

            <div className={styles.demoStats}>
              <div className={styles.statBadge}>Gold</div>
              <div className={styles.statBadge}>$5k</div>
            </div>

            <div className={styles.roiText}>31% ROI</div>

            <div className={styles.demoChart}>
              <div className={styles.chartLine}>📈</div>
            </div>

            <div className={styles.testimonial}>
              "I love my new fridge!"
            </div>
          </div>

          <div className={styles.playButtonDemo}>▶</div>
        </div>
      </div>
    </section>
  );
};

export default AboutSection;

src/components/CaseStudySection.module.css:
.caseStudySection {
  background: white;
  padding: 6rem 2rem;
}

.caseStudyContent {
  max-width: 1280px;
  margin: 0 auto;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
}

.caseStudyLeft {
  background: var(--gradient-blue);
  border-radius: 1.5rem;
  padding: 2rem;
  color: white;
  position: relative;
  overflow: hidden;
  min-height: 400px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.videoContainer {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 1rem;
  padding: 2rem;
  text-align: center;
  backdrop-filter: blur(10px);
  position: relative;
}

.statsGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 2rem;
}

.statItem {
  text-align: center;
}

.statNumber {
  font-size: 2rem;
  font-weight: bold;
  display: block;
}

.statLabel {
  font-size: 0.875rem;
  opacity: 0.9;
}

.aiMascot {
  position: absolute;
  bottom: 1rem;
  right: 1rem;
  width: 4rem;
  height: 4rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  backdrop-filter: blur(10px);
}

.playButtonLarge {
  width: 4rem;
  height: 4rem;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.5rem;
  backdrop-filter: blur(10px);
  cursor: pointer;
  transition: var(--transition-smooth);
  margin: 0 auto;
}

.playButtonLarge:hover {
  transform: scale(1.1);
}

.caseStudyRight {
  padding-left: 2rem;
}

.caseStudyTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 1.5rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.caseStudyDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 2rem 0;
}

.caseStudyActions {
  display: flex;
  gap: 1rem;
}

.storiesButton {
  padding: 0.875rem 2rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  box-shadow: var(--shadow-button);
}

.storiesButton:hover {
  background: hsl(var(--primary-hover));
}

.helpButton {
  padding: 0.875rem 2rem;
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
}

.helpButton:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

.closingSection {
  background: linear-gradient(135deg, hsl(220 20% 98%) 0%, hsl(var(--background)) 100%);
  padding: 4rem 2rem;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.closingTitle {
  font-size: 3rem;
  font-weight: bold;
  margin: 0;
  color: hsl(210 100% 25%);
}

.landscapeBottom {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 150px;
  background-size: cover;
  background-position: center bottom;
  opacity: 0.2;
}

@media (max-width: 768px) {
  .caseStudyContent {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .caseStudyRight {
    padding-left: 0;
  }
  
  .caseStudyTitle,
  .closingTitle {
    font-size: 2rem;
  }
}

src/components/CaseStudySection.tsx:
import styles from './CaseStudySection.module.css';
import landscapeImage from '@/assets/landscape-decoration.png';

const CaseStudySection = () => {
  return (
    <>
      <section className={styles.caseStudySection}>
        <div className={styles.caseStudyContent}>
          <div className={styles.caseStudyLeft}>
            <div className={styles.videoContainer}>
              <div className={styles.statsGrid}>
                <div className={styles.statItem}>
                  <span className={styles.statNumber}>196,000</span>
                  <span className={styles.statLabel}>Articles</span>
                </div>
                <div className={styles.statItem}>
                  <span className={styles.statNumber}>2M+</span>
                  <span className={styles.statLabel}>Support Cases</span>
                </div>
              </div>
              
              <div className={styles.playButtonLarge}>▶</div>
            </div>
            
            <div className={styles.aiMascot}>🤖</div>
          </div>

          <div className={styles.caseStudyRight}>
            <h2 className={styles.caseStudyTitle}>
              With 2M+ cases closed, Stratosuite Cloud is an Agentic Enterprise.
            </h2>
            <p className={styles.caseStudyDescription}>
              CloudBot helps us deliver real results, like 85% 
              autonomous case resolution, 15% more marketing pipeline, 
              and 1.8x higher lead conversion. See how we did it – and 
              how you can, too.
            </p>
            <div className={styles.caseStudyActions}>
              <button className={styles.storiesButton}>See our stories</button>
              <button className={styles.helpButton}>Experience Stratosuite Help</button>
            </div>
          </div>
        </div>
      </section>

      <section className={styles.closingSection}>
        <div 
          className={styles.landscapeBottom}
          style={{ backgroundImage: `url(${landscapeImage})` }}
        />
        <h2 className={styles.closingTitle}>Let's make this easy.</h2>
      </section>
    </>
  );
};

export default CaseStudySection;

src/components/FinalCTASection.module.css:
.finalCTASection {
  background: linear-gradient(135deg, hsl(220 20% 98%) 0%, hsl(var(--background)) 100%);
  padding: 6rem 2rem;
  text-align: center;
  position: relative;
  overflow: hidden;
  min-height: 400px;
}

.landscapeBottom {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 200px;
  background-size: cover;
  background-position: center bottom;
  opacity: 0.3;
}

.ctaContent {
  max-width: 800px;
  margin: 0 auto;
  position: relative;
  z-index: 2;
}

.ctaTitle {
  font-size: 3.5rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 2rem 0;
  line-height: 1.1;
}

.ctaSubtitle {
  font-size: 1.75rem;
  font-weight: 600;
  color: hsl(var(--foreground));
  margin: 0 0 3rem 0;
  line-height: 1.3;
}

.ctaButton {
  padding: 1.25rem 3rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  font-size: 1.25rem;
  cursor: pointer;
  transition: var(--transition-smooth);
  box-shadow: var(--shadow-button);
}

.ctaButton:hover {
  background: hsl(var(--primary-hover));
  transform: translateY(-3px);
  box-shadow: var(--shadow-button-hover);
}

@media (max-width: 768px) {
  .ctaTitle {
    font-size: 2.5rem;
  }
  
  .ctaSubtitle {
    font-size: 1.25rem;
  }
  
  .ctaButton {
    padding: 1rem 2rem;
    font-size: 1.125rem;
  }
}

src/components/FinalCTASection.tsx:
import { Link } from 'react-router-dom';
import styles from './FinalCTASection.module.css';
import landscapeImage from '@/assets/landscape-decoration.png';

const FinalCTASection = () => {
  return (
    <section className={styles.finalCTASection}>
      <div 
        className={styles.landscapeBottom}
        style={{ backgroundImage: `url(${landscapeImage})` }}
      />
      
      <div className={styles.ctaContent}>
        <h2 className={styles.ctaTitle}>Get started today.</h2>
        
        <h3 className={styles.ctaSubtitle}>
          There's nothing to install. No credit card required. Free for 30 days.
        </h3>
        
        <Link to="/try-for-free" className={styles.ctaButton}>Try for free</Link>
      </div>
    </section>
  );
};

export default FinalCTASection;

src/components/Footer.module.css:
.footer {
  background: white;
  position: relative;
}

.landscapeDecor {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 150px;
  background-size: cover;
  background-position: center top;
  opacity: 0.3;
  transform: scaleY(-1);
}

.footerContent {
  max-width: 1280px;
  margin: 0 auto;
  padding: 6rem 2rem 3rem 2rem;
  position: relative;
  z-index: 2;
}

.footerTop {
  display: grid;
  grid-template-columns: 1fr 2fr;
  gap: 4rem;
  margin-bottom: 3rem;
}

.brandSection {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.logoIcon {
  font-size: 2rem;
}

.logoText {
  font-size: 1.5rem;
  font-weight: bold;
  color: hsl(var(--primary));
}

.socialLinks {
  display: flex;
  gap: 1rem;
}

.socialLink {
  width: 2.5rem;
  height: 2.5rem;
  background: hsl(var(--muted));
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  transition: var(--transition-smooth);
}

.socialLink:hover {
  background: hsl(var(--primary));
  transform: translateY(-2px);
}

.contact {
  color: hsl(var(--muted-foreground));
}

.contact p {
  margin: 0 0 0.5rem 0;
  font-weight: 600;
}

.contactLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 600;
}

.contactLink:hover {
  text-decoration: underline;
}

.linksGrid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
}

.linkColumn {
  display: flex;
  flex-direction: column;
}

.columnTitle {
  font-size: 1rem;
  font-weight: bold;
  color: hsl(var(--foreground));
  margin: 0 0 1rem 0;
}

.linkList {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.footerLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-size: 0.875rem;
  transition: var(--transition-smooth);
}

.footerLink:hover {
  text-decoration: underline;
}

.footerBottom {
  background: hsl(var(--primary));
  color: white;
  padding: 2rem 0;
}

.footerBottomContent {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 2rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.regionSelector {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
  cursor: pointer;
}

.globe {
  font-size: 1.2rem;
}

.dropdown {
  font-size: 0.8rem;
}

.legalLinks {
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
}

.legalLink {
  color: white;
  text-decoration: none;
  font-size: 0.875rem;
  opacity: 0.9;
  transition: var(--transition-smooth);
}

.legalLink:hover {
  opacity: 1;
  text-decoration: underline;
}

.copyright {
  font-size: 0.75rem;
  opacity: 0.8;
  line-height: 1.5;
}

.copyright p {
  margin: 0;
}

@media (max-width: 1024px) {
  .footerTop {
    grid-template-columns: 1fr;
    gap: 3rem;
  }
  
  .linksGrid {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
}

@media (max-width: 768px) {
  .footerContent {
    padding: 4rem 1rem 2rem 1rem;
  }
  
  .legalLinks {
    flex-direction: column;
    gap: 1rem;
  }
  
  .footerBottomContent {
    padding: 0 1rem;
  }
}

src/components/Footer.tsx:
import styles from './Footer.module.css';
import landscapeImage from '@/assets/landscape-decoration.png';

const Footer = () => {
  return (
    <footer className={styles.footer}>
      <div 
        className={styles.landscapeDecor}
        style={{ backgroundImage: `url(${landscapeImage})` }}
      />
      
      <div className={styles.footerContent}>
        <div className={styles.footerTop}>
          <div className={styles.brandSection}>
            <div className={styles.logo}>
              <span className={styles.logoIcon}>☁️</span>
              <span className={styles.logoText}>stratosuite</span>
            </div>
            
            <div className={styles.socialLinks}>
              <a href="#" className={styles.socialLink}>📱</a>
              <a href="#" className={styles.socialLink}>🐦</a>
              <a href="#" className={styles.socialLink}>💼</a>
              <a href="#" className={styles.socialLink}>📷</a>
              <a href="#" className={styles.socialLink}>📺</a>
              <a href="#" className={styles.socialLink}>🎵</a>
            </div>
            
            <div className={styles.contact}>
              <p>Call us at 1-800-664-9073</p>
              <a href="#" className={styles.contactLink}>See all ways to contact us</a>
            </div>
          </div>
          
          <div className={styles.linksGrid}>
            <div className={styles.linkColumn}>
              <h3 className={styles.columnTitle}>New to Stratosuite?</h3>
              <ul className={styles.linkList}>
                <li><a href="#" className={styles.footerLink}>What is CRM?</a></li>
                <li><a href="#" className={styles.footerLink}>Digital Marketing</a></li>
                <li><a href="#" className={styles.footerLink}>Customer Service Software</a></li>
                <li><a href="#" className={styles.footerLink}>Email Marketing</a></li>
                <li><a href="#" className={styles.footerLink}>Ecommerce</a></li>
                <li><a href="#" className={styles.footerLink}>Artificial Intelligence</a></li>
                <li><a href="#" className={styles.footerLink}>Revenue Management Solutions</a></li>
                <li><a href="#" className={styles.footerLink}>AI Agents</a></li>
                <li><a href="#" className={styles.footerLink}>SaaS</a></li>
              </ul>
            </div>
            
            <div className={styles.linkColumn}>
              <h3 className={styles.columnTitle}>About Stratosuite</h3>
              <ul className={styles.linkList}>
                <li><a href="#" className={styles.footerLink}>What is Stratosuite?</a></li>
                <li><a href="#" className={styles.footerLink}>Newsroom</a></li>
                <li><a href="#" className={styles.footerLink}>Customer Success</a></li>
                <li><a href="#" className={styles.footerLink}>Blog</a></li>
                <li><a href="#" className={styles.footerLink}>Careers</a></li>
                <li><a href="#" className={styles.footerLink}>Trust</a></li>
                <li><a href="#" className={styles.footerLink}>Sustainability</a></li>
                <li><a href="#" className={styles.footerLink}>Investors</a></li>
                <li><a href="#" className={styles.footerLink}>Give us your Feedback</a></li>
              </ul>
            </div>
            
            <div className={styles.linkColumn}>
              <h3 className={styles.columnTitle}>Popular Links</h3>
              <ul className={styles.linkList}>
                <li><a href="#" className={styles.footerLink}>Stratosuite Login</a></li>
                <li><a href="#" className={styles.footerLink}>New Release Features</a></li>
                <li><a href="#" className={styles.footerLink}>Find or Become a Partner</a></li>
                <li><a href="#" className={styles.footerLink}>Dreamforce</a></li>
                <li><a href="#" className={styles.footerLink}>Stratosuite+</a></li>
                <li><a href="#" className={styles.footerLink}>CRM Software</a></li>
                <li><a href="#" className={styles.footerLink}>All Cloud Products</a></li>
                <li><a href="#" className={styles.footerLink}>Product Pricing</a></li>
                <li><a href="#" className={styles.footerLink}>Newsletter Sign-Up ↗</a></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      
      <div className={styles.footerBottom}>
        <div className={styles.footerBottomContent}>
          <div className={styles.regionSelector}>
            <span className={styles.globe}>🌍</span>
            <span>Worldwide</span>
            <span className={styles.dropdown}>▼</span>
          </div>
          
          <div className={styles.legalLinks}>
            <a href="#" className={styles.legalLink}>Legal</a>
            <a href="#" className={styles.legalLink}>Terms of Service</a>
            <a href="#" className={styles.legalLink}>Privacy Information</a>
            <a href="#" className={styles.legalLink}>Responsible Disclosure</a>
            <a href="#" className={styles.legalLink}>Trust</a>
            <a href="#" className={styles.legalLink}>Contact</a>
            <a href="#" className={styles.legalLink}>Cookie Preferences</a>
            <a href="#" className={styles.legalLink}>Your Privacy Choices</a>
          </div>
          
          <div className={styles.copyright}>
            <p>© Copyright 2025 Stratosuite, Inc. All rights reserved. Various trademarks held by their respective owners. Stratosuite, Inc. Stratosuite Tower, 415 Mission Street, 3rd Floor, San Francisco, CA 94105, United States</p>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

src/components/GetStartedSection.module.css:
.getStartedSection {
  background: white;
  padding: 0 2rem 6rem 2rem;
  position: relative;
}

.landscapeTop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 150px;
  background-size: cover;
  background-position: center top;
  opacity: 0.2;
  transform: scaleY(-1);
}

.getStartedContent {
  max-width: 1280px;
  margin: 0 auto;
  padding-top: 4rem;
}

.contentGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
}

.videoSection {
  position: relative;
}

.videoContainer {
  background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-dark)));
  border-radius: 1.5rem;
  padding: 2rem;
  color: white;
  position: relative;
  overflow: hidden;
  min-height: 400px;
}

.stepIndicator {
  position: absolute;
  top: 2rem;
  left: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.stepNumber {
  width: 3rem;
  height: 3rem;
  background: hsl(var(--accent));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  font-weight: bold;
  color: white;
}

.stepLabel {
  font-size: 0.875rem;
  font-weight: 600;
  margin-top: 0.5rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.videoPreview {
  margin-top: 4rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}

.playButton {
  width: 4rem;
  height: 4rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  backdrop-filter: blur(10px);
  cursor: pointer;
  transition: var(--transition-smooth);
}

.playButton:hover {
  transform: scale(1.1);
}

.formPreview {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 1rem;
  padding: 1.5rem;
  width: 100%;
  max-width: 300px;
  backdrop-filter: blur(10px);
}

.formTitle {
  font-size: 0.875rem;
  margin-bottom: 1rem;
  opacity: 0.9;
}

.formFields {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.formField {
  height: 1rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 0.25rem;
}

.textSection {
  padding-left: 2rem;
}

.sectionTitle {
  font-size: 2.5rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 1.5rem 0;
  line-height: 1.2;
}

.sectionDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 2rem 0;
}

.tryButton {
  padding: 1rem 2.5rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  font-size: 1.125rem;
  cursor: pointer;
  transition: var(--transition-smooth);
  box-shadow: var(--shadow-button);
  margin-bottom: 3rem;
}

.tryButton:hover {
  background: hsl(var(--primary-hover));
  transform: translateY(-2px);
}

.stepsList {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.step {
  display: flex;
  gap: 1rem;
}

.stepNum {
  color: hsl(var(--primary));
  font-weight: bold;
  font-size: 1.125rem;
  min-width: 2rem;
}

.stepContent {
  flex: 1;
}

.stepTitle {
  font-size: 1.125rem;
  font-weight: bold;
  color: hsl(var(--foreground));
  margin: 0 0 0.5rem 0;
}

.stepDescription {
  font-size: 1rem;
  color: hsl(var(--muted-foreground));
  line-height: 1.6;
  margin: 0;
}

@media (max-width: 768px) {
  .contentGrid {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .textSection {
    padding-left: 0;
  }
  
  .sectionTitle {
    font-size: 2rem;
  }
}

src/components/GetStartedSection.tsx:
import { Link } from 'react-router-dom';
import styles from './GetStartedSection.module.css';
import landscapeImage from '@/assets/landscape-decoration.png';

const GetStartedSection = () => {
  return (
    <section className={styles.getStartedSection}>
      <div 
        className={styles.landscapeTop}
        style={{ backgroundImage: `url(${landscapeImage})` }}
      />
      
      <div className={styles.getStartedContent}>
        <div className={styles.contentGrid}>
          <div className={styles.videoSection}>
            <div className={styles.videoContainer}>
              <div className={styles.stepIndicator}>
                <span className={styles.stepNumber}>1</span>
                <span className={styles.stepLabel}>Step</span>
              </div>
              
              <div className={styles.videoPreview}>
                <div className={styles.playButton}>▶</div>
                <div className={styles.formPreview}>
                  <div className={styles.formTitle}>What brings you to Stratosuite Cloud</div>
                  <div className={styles.formFields}>
                    <div className={styles.formField}></div>
                    <div className={styles.formField}></div>
                    <div className={styles.formField}></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className={styles.textSection}>
            <h2 className={styles.sectionTitle}>Get up and running quickly.</h2>
            <p className={styles.sectionDescription}>
              Get started with Starter Suite, the all-in-one CRM app for 
              marketing, sales, and service.
            </p>
            
            <Link to="/try-for-free" className={styles.tryButton}>Try for free</Link>
            
            <div className={styles.stepsList}>
              <div className={styles.step}>
                <span className={styles.stepNum}>1.</span>
                <div className={styles.stepContent}>
                  <h3 className={styles.stepTitle}>Set up and start.</h3>
                  <p className={styles.stepDescription}>
                    There's nothing to install. Simply enter your details and you're 
                    ready to get going, right in your browser.
                  </p>
                </div>
              </div>
              
              <div className={styles.step}>
                <span className={styles.stepNum}>2.</span>
                <div className={styles.stepContent}>
                  <h3 className={styles.stepTitle}>Connect email and sync contacts.</h3>
                </div>
              </div>
              
              <div className={styles.step}>
                <span className={styles.stepNum}>3.</span>
                <div className={styles.stepContent}>
                  <h3 className={styles.stepTitle}>Bring in your data.</h3>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default GetStartedSection;

src/components/Header.module.css:
.header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid hsl(var(--border));
}

.headerContent {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 2rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 4rem;
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 1.5rem;
  font-weight: bold;
  color: hsl(var(--primary));
  text-decoration: none;
}

.logoIcon {
  width: 2rem;
  height: 2rem;
  background: hsl(var(--primary));
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
}

.nav {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.navLinks {
  display: flex;
  align-items: center;
  gap: 2rem;
  list-style: none;
  margin: 0;
  padding: 0;
}

.navLink {
  color: hsl(var(--foreground));
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s;
}

.navLink:hover {
  color: hsl(var(--primary));
}

.searchContainer {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: hsl(var(--secondary));
  border: 1px solid hsl(var(--border));
  border-radius: 0.5rem;
  padding: 0.5rem 1rem;
  max-width: 300px;
  width: 100%;
}

.searchIcon {
  width: 1rem;
  height: 1rem;
  color: hsl(var(--muted-foreground));
}

.searchInput {
  background: transparent;
  border: none;
  outline: none;
  flex: 1;
  color: hsl(var(--foreground));
  font-size: 0.875rem;
}

.searchInput::placeholder {
  color: hsl(var(--muted-foreground));
}

.headerActions {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.contactInfo {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  font-size: 0.875rem;
}

.contactLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 500;
}

.phoneNumber {
  color: hsl(var(--muted-foreground));
}

.headerButton {
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  text-decoration: none;
  transition: var(--transition-smooth);
  border: none;
  cursor: pointer;
  font-size: 0.875rem;
}

.loginButton {
  background: transparent;
  color: hsl(var(--foreground));
  border: 1px solid hsl(var(--border));
}

.loginButton:hover {
  background: hsl(var(--secondary));
}

.tryButton {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  box-shadow: var(--shadow-button);
}

.tryButton:hover {
  background: hsl(var(--primary-hover));
}

@media (max-width: 1200px) {
  .headerContent {
    padding: 0 1rem;
  }
  
  .searchContainer {
    max-width: 200px;
  }
}

@media (max-width: 1024px) {
  .logo {
    font-size: 1.25rem;
  }
  
  .searchContainer {
    max-width: 150px;
  }
  
  .contactInfo {
    font-size: 0.75rem;
  }
  
  .headerButton {
    padding: 0.4rem 0.8rem;
    font-size: 0.75rem;
  }
}

@media (max-width: 900px) {
  .navLinks {
    gap: 1rem;
  }
  
  .navLink {
    font-size: 0.875rem;
  }
}

@media (max-width: 768px) {
  .headerContent {
    padding: 0 1rem;
    height: auto;
    min-height: 4rem;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .navLinks {
    display: none;
  }
  
  .searchContainer {
    display: none;
  }
  
  .contactInfo {
    display: none;
  }
  
  .headerActions {
    gap: 0.5rem;
  }
}

src/components/Header.tsx:
import { Link } from 'react-router-dom';
import styles from './Header.module.css';

const Header = () => {
  return (
    <header className={styles.header}>
      <div className={styles.headerContent}>
        <a href="/" className={styles.logo}>
          <div className={styles.logoIcon}>S</div>
          Stratosuite Cloud
        </a>
        
        <nav className={styles.nav}>
          <ul className={styles.navLinks}>
            <li><a href="#" className={styles.navLink}>Products</a></li>
            <li><a href="#" className={styles.navLink}>Industries</a></li>
            {/* <li><a href="#" className={styles.navLink}>Customers</a></li> */}
            {/* <li><a href="#" className={styles.navLink}>Events</a></li> */}
            {/* <li><a href="#" className={styles.navLink}>Learning</a></li>
            <li><a href="#" className={styles.navLink}>Support</a></li>
            <li><a href="#" className={styles.navLink}>Company</a></li> */}
          </ul>
        </nav>

        <div className={styles.searchContainer}>
          <svg className={styles.searchIcon} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <input 
            type="text" 
            placeholder="Ask CloudBot anything" 
            className={styles.searchInput}
          />
        </div>

        <div className={styles.headerActions}>
          <div className={styles.contactInfo}>
            <a href="#" className={styles.contactLink}>Contact Us</a>
            <span className={styles.phoneNumber}>1-800-664-9073</span>
          </div>
          
          <button className={`${styles.headerButton} ${styles.loginButton}`}>
            🌐 Login
          </button>
          
          <Link to="/try-for-free" className={`${styles.headerButton} ${styles.tryButton}`}>
            Try for free
          </Link>
        </div>
      </div>
    </header>
  );
};

export default Header;

src/components/HeroSection.module.css:
.hero {
  background: linear-gradient(135deg, hsl(210 100% 45%) 0%, hsl(270 80% 55%) 100%);
  position: relative;
  overflow: hidden;
}

.announcementBar {
  background: hsl(220 100% 20%);
  padding: 0.75rem 2rem;
  text-align: center;
  color: white;
}

.announcementText {
  font-size: 0.875rem;
  margin: 0;
}

.announcementLink {
  color: hsl(200 100% 80%);
  text-decoration: underline;
  font-weight: 500;
}

.heroContent {
  max-width: 1280px;
  margin: 0 auto;
  padding: 4rem 2rem;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
  min-height: 60vh;
}

.heroLeft {
  color: white;
}

.heroTitle {
  font-size: 3rem;
  font-weight: bold;
  margin: 0 0 1.5rem 0;
  line-height: 1.1;
}

.heroSubtitle {
  font-size: 1.125rem;
  margin: 0 0 2rem 0;
  opacity: 0.9;
  line-height: 1.6;
}

.chatInterface {
  background: white;
  border-radius: 1rem;
  padding: 1.5rem;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.chatInputContainer {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  background: hsl(var(--secondary));
  border-radius: 0.75rem;
  padding: 1rem;
  margin-bottom: 1rem;
}

.chatIcon {
  width: 1.5rem;
  height: 1.5rem;
  color: hsl(var(--primary));
}

.chatInput {
  flex: 1;
  background: transparent;
  border: none;
  outline: none;
  color: hsl(var(--foreground));
  font-size: 1rem;
}

.chatInput::placeholder {
  color: hsl(var(--muted-foreground));
}

.sendIcon {
  width: 1.25rem;
  height: 1.25rem;
  color: hsl(var(--muted-foreground));
  cursor: pointer;
}

.chatActions {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.chatAction {
  padding: 0.5rem 1rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  cursor: pointer;
  transition: var(--transition-smooth);
}

.chatAction:hover {
  background: hsl(var(--primary-hover));
}

.chatActionOutline {
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
}

.chatActionOutline:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

.heroRight {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.aiAssistant {
  max-width: 400px;
  width: 100%;
  height: auto;
}

.mainSection {
  background: white;
  padding: 4rem 2rem;
}

.mainContent {
  max-width: 1280px;
  margin: 0 auto;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
}

.mainLeft {
  padding-right: 2rem;
}

.brandLine {
  color: hsl(var(--primary));
  font-weight: 600;
  margin: 0 0 1rem 0;
  font-size: 0.875rem;
  text-transform: uppercase;
  letter-spacing: 0.1em;
}

.mainTitle {
  font-size: 3.5rem;
  font-weight: bold;
  margin: 0 0 1.5rem 0;
  line-height: 1.1;
}

.titlePrimary {
  color: hsl(var(--primary));
}

.titleSecondary {
  color: hsl(210 100% 25%);
}

.mainDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 2rem 0;
}

.mainActions {
  display: flex;
  gap: 1rem;
}

.primaryButton {
  padding: 0.875rem 2rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  box-shadow: var(--shadow-button);
}

.primaryButton:hover {
  background: hsl(var(--primary-hover));
}

.secondaryButton {
  padding: 0.875rem 2rem;
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
}

.secondaryButton:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

.mainRight {
  position: relative;
}

.dashboardMockup {
  width: 100%;
  height: auto;
  border-radius: 1rem;
  box-shadow: var(--shadow-card-hover);
}

@media (max-width: 768px) {
  .heroContent,
  .mainContent {
    grid-template-columns: 1fr;
    gap: 2rem;
    text-align: center;
  }
  
  .heroTitle,
  .mainTitle {
    font-size: 2rem;
  }
  
  .chatActions {
    justify-content: center;
  }
}

src/components/HeroSection.tsx:
import { Link } from 'react-router-dom';
import styles from './HeroSection.module.css';
import aiAssistant from '@/assets/ai-assistant.png';
import dashboardMockup from '@/assets/crm-dashboard.png';

const HeroSection = () => {
  return (
    <>
      {/* Announcement Bar */}
      <div className={styles.announcementBar}>
        <p className={styles.announcementText}>
          CloudForce passes are going fast. Don't miss the most valuable event for business.{' '}
          <a href="#" className={styles.announcementLink}>Register now</a>
        </p>
      </div>

      {/* Hero Section */}
      <section className={styles.hero}>
        <div className={styles.heroContent}>
          <div className={styles.heroLeft}>
            <h1 className={styles.heroTitle}>
              Ask CloudBot anything.
            </h1>
            
            <div className={styles.chatInterface}>
              <div className={styles.chatInputContainer}>
                <svg className={styles.chatIcon} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.955 8.955 0 01-4.126-.98L3 20l1.98-5.874A8.955 8.955 0 013 12c0-4.418 3.582-8 8-8s8 3.582 8 8z" />
                </svg>
                <input 
                  type="text" 
                  placeholder="Ask me about products, features, and pricing, or connect to a sales rep."
                  className={styles.chatInput}
                />
                <svg className={styles.sendIcon} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </div>
              
              <div className={styles.chatActions}>
                <button className={styles.chatAction}>Connect me with a sales rep</button>
                <button className={`${styles.chatAction} ${styles.chatActionOutline}`}>Show me a CloudBot demo</button>
                <button className={`${styles.chatAction} ${styles.chatActionOutline}`}>How can Stratosuite help my business</button>
              </div>
            </div>
          </div>
          
          <div className={styles.heroRight}>
            <img src={aiAssistant} alt="AI Assistant" className={styles.aiAssistant} />
          </div>
        </div>
      </section>

      {/* Main Value Proposition */}
      <section className={styles.mainSection}>
        <div className={styles.mainContent}>
          <div className={styles.mainLeft}>
            <p className={styles.brandLine}>Stratosuite Cloud. The #1 AI CRM.</p>
            <h2 className={styles.mainTitle}>
              <span className={styles.titlePrimary}>Grow faster</span>{' '}
              <span className={styles.titleSecondary}>and work smarter.</span>
            </h2>
            <p className={styles.mainDescription}>
              Start simply with Starter Suite, the all-in-one CRM. 
              Then scale endlessly with autonomous AI agents, 
              unified data, and CRM apps together on one 
              integrated platform. And connect with customers in a 
              whole new way.
            </p>
            <div className={styles.mainActions}>
              <Link to="/try-for-free" className={styles.primaryButton}>Try for free</Link>
              <Link to="/watch-demos" className={styles.secondaryButton}>Watch demos</Link>
            </div>
          </div>
          
          <div className={styles.mainRight}>
            <img src={dashboardMockup} alt="CRM Dashboard" className={styles.dashboardMockup} />
          </div>
        </div>
      </section>
    </>
  );
};

export default HeroSection;

src/components/IndustrySection.module.css:
.industrySection {
  padding: 6rem 2rem;
  background: white;
}

.industryContent {
  max-width: 1280px;
  margin: 0 auto;
  text-align: center;
}

.sectionTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 1rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.sectionSubtitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 4rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.industryGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 2rem;
  margin-bottom: 3rem;
}

.industryCard {
  background: white;
  border: 1px solid hsl(var(--border));
  border-radius: 1rem;
  padding: 2rem;
  text-align: left;
  transition: var(--transition-smooth);
  position: relative;
  overflow: hidden;
}

.industryCard:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-card-hover);
}

.industryCard::after {
  content: '';
  position: absolute;
  bottom: 0;
  right: 0;
  width: 120px;
  height: 120px;
  background: var(--gradient-purple);
  border-radius: 100% 0 0 0;
  opacity: 0.1;
}

.cardTitle {
  font-size: 1.5rem;
  font-weight: bold;
  margin: 0 0 1rem 0;
  color: hsl(210 100% 25%);
}

.cardDescription {
  color: hsl(var(--muted-foreground));
  line-height: 1.6;
  margin: 0 0 2rem 0;
}

.cardLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 600;
  border-bottom: 1px solid transparent;
  transition: border-color 0.2s;
}

.cardLink:hover {
  border-color: hsl(var(--primary));
}

.cardIcon {
  position: absolute;
  bottom: 1.5rem;
  right: 1.5rem;
  width: 2.5rem;
  height: 2.5rem;
  background: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: var(--shadow-card);
  font-size: 1.25rem;
  z-index: 1;
}

.seeAllButton {
  padding: 0.875rem 2rem;
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  margin-top: 2rem;
}

.seeAllButton:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

@media (max-width: 768px) {
  .industryGrid {
    grid-template-columns: 1fr;
  }
  
  .sectionTitle,
  .sectionSubtitle {
    font-size: 2rem;
  }
}

src/components/IndustrySection.tsx:
import styles from './IndustrySection.module.css';

const IndustrySection = () => {
  const industries = [
    {
      id: 'financial',
      title: 'Financial Services',
      description: 'Unlock the most valuable currency: customer trust.',
      icon: '🏦'
    },
    {
      id: 'retail',
      title: 'Retail',
      description: 'Acquire profitable customers faster with unified, real-time data.',
      icon: '🛍️'
    },
    {
      id: 'healthcare',
      title: 'Healthcare & Life Sciences',
      description: 'Build stronger patient and member relationships on a connected platform.',
      icon: '❤️'
    },
    {
      id: 'construction',
      title: 'Construction & Real Estate',
      description: 'Streamline processes and achieve operational excellence to drive profitability and growth.',
      icon: '🏗️'
    },
    {
      id: 'education',
      title: 'Education',
      description: 'Elevate the education experience with the #1 AI CRM for learner and institution success.',
      icon: '🎓'
    },
    {
      id: 'professional',
      title: 'Professional Services',
      description: 'Increase client trust, recruit and retain the right talent, and build a vibrant work culture.',
      icon: '💼'
    },
    {
      id: 'technology',
      title: 'Technology',
      description: 'Automate workflows, unify and integrate data, and thrive in a new era of tech, powered by trusted AI.',
      icon: '💻'
    },
    {
      id: 'manufacturing',
      title: 'Manufacturing',
      description: 'Integrate all your data across a unified value chain to better serve customers and channel partners.',
      icon: '⚙️'
    }
  ];

  return (
    <section className={styles.industrySection}>
      <div className={styles.industryContent}>
        <h2 className={styles.sectionTitle}>
          Find the right solution for your company —
        </h2>
        <h3 className={styles.sectionSubtitle}>
          any size, any industry.
        </h3>

        <div className={styles.industryGrid}>
          {industries.map((industry) => (
            <div key={industry.id} className={styles.industryCard}>
              <h3 className={styles.cardTitle}>{industry.title}</h3>
              <p className={styles.cardDescription}>{industry.description}</p>
              <a href="#" className={styles.cardLink}>Learn more</a>
              <div className={styles.cardIcon}>{industry.icon}</div>
            </div>
          ))}
        </div>

        <button className={styles.seeAllButton}>See all industries</button>
      </div>
    </section>
  );
};

export default IndustrySection;

src/components/IntegrationSection.module.css:
.integrationSection {
  padding: 6rem 2rem;
  background: white;
  position: relative;
  overflow: hidden;
}

.integrationContent {
  max-width: 1280px;
  margin: 0 auto;
  text-align: center;
}

.sectionTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 2rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.sectionDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 3rem 0;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

.appLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 600;
}

.appLink:hover {
  text-decoration: underline;
}

.browseButton {
  padding: 0.875rem 2rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  box-shadow: var(--shadow-button);
  margin-bottom: 4rem;
}

.browseButton:hover {
  background: hsl(var(--primary-hover));
}

.appShowcase {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
  gap: 2rem;
  max-width: 800px;
  margin: 0 auto 4rem auto;
  align-items: center;
}

.appIcon {
  width: 80px;
  height: 80px;
  border-radius: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  font-weight: bold;
  color: white;
  margin: 0 auto;
  transition: var(--transition-smooth);
  cursor: pointer;
}

.appIcon:hover {
  transform: translateY(-4px);
}

.appIcon.five9 {
  background: hsl(var(--ai-blue));
}

.appIcon.zoom {
  background: hsl(var(--ai-blue));
}

.appIcon.linkedin {
  background: hsl(var(--ai-blue));
}

.appIcon.dropbox {
  background: hsl(210 100% 25%);
}

.appIcon.panda {
  background: hsl(var(--analytics-red));
}

.appIcon.oce {
  background: hsl(var(--agent-purple));
}

.appIcon.box {
  background: hsl(var(--ai-blue));
}

.appIcon.servicemax {
  background: hsl(var(--sales-green));
}

.appIcon.otter {
  background: hsl(var(--mulesoft-blue));
}

.appIcon.conga {
  background: hsl(var(--analytics-red));
}

.natureDecor {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 300px;
  height: 200px;
  background: linear-gradient(135deg, hsl(120 60% 70%), hsl(140 80% 60%));
  clip-path: ellipse(200px 100px at 150px 200px);
  opacity: 0.1;
}

@media (max-width: 768px) {
  .appShowcase {
    grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
    gap: 1rem;
  }
  
  .appIcon {
    width: 60px;
    height: 60px;
    font-size: 1.5rem;
  }
  
  .sectionTitle {
    font-size: 2rem;
  }
}

src/components/IntegrationSection.tsx:
import styles from './IntegrationSection.module.css';

const IntegrationSection = () => {
  const apps = [
    { id: 'five9', name: 'Five9', icon: '5️⃣' },
    { id: 'zoom', name: 'Zoom', icon: '📹' },
    { id: 'linkedin', name: 'LinkedIn', icon: 'in' },
    { id: 'dropbox', name: 'Dropbox', icon: '📦' },
    { id: 'panda', name: 'Panda', icon: 'P' },
    { id: 'oce', name: 'OCE', icon: '📡' },
    { id: 'box', name: 'Box', icon: 'box' },
    { id: 'servicemax', name: 'ServiceMax', icon: 'SM' },
    { id: 'otter', name: 'Otter', icon: '🦦' },
    { id: 'conga', name: 'Conga', icon: 'C' }
  ];

  return (
    <section className={styles.integrationSection}>
      <div className={styles.natureDecor} />
      
      <div className={styles.integrationContent}>
        <h2 className={styles.sectionTitle}>Integrate seamlessly.</h2>
        
        <p className={styles.sectionDescription}>
          Stratosuite Cloud works with thousands of partner apps and certified consultants to help you 
          extend Stratosuite Cloud and boost productivity. All are easily discoverable on{' '}
          <a href="#" className={styles.appLink}>AppExchange</a>, 
          the leading enterprise cloud marketplace and home to over 9,000 solutions. Need to 
          connect outside systems? We've got you covered with{' '}
          <a href="#" className={styles.appLink}>MuleSoft</a>, our API platform.
        </p>

        <button className={styles.browseButton}>Browse all apps</button>

        <div className={styles.appShowcase}>
          {apps.map((app) => (
            <div key={app.id} className={`${styles.appIcon} ${styles[app.id]}`}>
              {app.icon}
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default IntegrationSection;

src/components/LearningSection.module.css:
.learningSection {
  background: white;
  padding: 6rem 2rem;
}

.learningContent {
  max-width: 1280px;
  margin: 0 auto;
  text-align: center;
}

.sectionTitle {
  font-size: 3rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 1.5rem 0;
}

.sectionDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  max-width: 800px;
  margin: 0 auto 4rem auto;
}

.learningGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 3rem;
}

.learningCard {
  background: linear-gradient(135deg, hsl(var(--accent)), hsl(var(--accent-light)));
  border-radius: 1.5rem;
  overflow: hidden;
  color: white;
  min-height: 500px;
  display: flex;
  flex-direction: column;
}

.cardImage {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  position: relative;
}

.trailheadIllustration {
  position: relative;
  width: 100%;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.mascot {
  font-size: 4rem;
  z-index: 2;
}

.badges {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: space-around;
}

.badge {
  width: 3rem;
  height: 3rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  backdrop-filter: blur(10px);
}

.eventsIllustration {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
}

.eventScreens {
  display: flex;
  gap: 1rem;
}

.eventScreen {
  width: 5rem;
  height: 3rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  backdrop-filter: blur(10px);
}

.cardContent {
  padding: 2rem;
  text-align: left;
}

.cardLabel {
  font-size: 0.875rem;
  font-weight: 600;
  opacity: 0.9;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.cardTitle {
  font-size: 1.5rem;
  font-weight: bold;
  margin: 1rem 0 2rem 0;
  line-height: 1.3;
}

.cardButton {
  padding: 0.875rem 2rem;
  background: rgba(255, 255, 255, 0.2);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  backdrop-filter: blur(10px);
}

.cardButton:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-2px);
}

@media (max-width: 768px) {
  .learningGrid {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .sectionTitle {
    font-size: 2rem;
  }
}

src/components/LearningSection.tsx:
import styles from './LearningSection.module.css';

const LearningSection = () => {
  return (
    <section className={styles.learningSection}>
      <div className={styles.learningContent}>
        <h2 className={styles.sectionTitle}>Learn as you grow.</h2>
        <p className={styles.sectionDescription}>
          When you're ready to get up and running on Stratosuite Cloud, we have all sorts of people and 
          free resources to help your teams quickly get up to speed. And we're always here for 
          you with more learning and support as you continue to grow with Stratosuite Cloud.
        </p>

        <div className={styles.learningGrid}>
          <div className={styles.learningCard}>
            <div className={styles.cardImage}>
              <div className={styles.trailheadIllustration}>
                <div className={styles.mascot}>🐻</div>
                <div className={styles.badges}>
                  <div className={styles.badge}>📝</div>
                  <div className={styles.badge}>🏆</div>
                  <div className={styles.badge}>📊</div>
                </div>
              </div>
            </div>
            <div className={styles.cardContent}>
              <span className={styles.cardLabel}>SkillPath</span>
              <h3 className={styles.cardTitle}>
                Help every employee get the Stratosuite Cloud skills they need.
              </h3>
              <button className={styles.cardButton}>Learn for free</button>
            </div>
          </div>

          <div className={styles.learningCard}>
            <div className={styles.cardImage}>
              <div className={styles.eventsIllustration}>
                <div className={styles.eventScreens}>
                  <div className={styles.eventScreen}>📺</div>
                  <div className={styles.eventScreen}>🎯</div>
                </div>
              </div>
            </div>
            <div className={styles.cardContent}>
              <span className={styles.cardLabel}>Stratosuite+</span>
              <h3 className={styles.cardTitle}>
                Learn more about products at live and on-demand events.
              </h3>
              <button className={styles.cardButton}>Explore events</button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default LearningSection;

src/components/PartnershipSection.module.css:
.partnershipSection {
  background: linear-gradient(135deg, hsl(220 20% 98%) 0%, hsl(var(--background)) 100%);
  padding: 6rem 2rem;
  position: relative;
  overflow: hidden;
}

.partnershipContent {
  max-width: 1280px;
  margin: 0 auto;
}

.partnershipGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 3rem;
}

.partnershipCard {
  background: white;
  border-radius: 1.5rem;
  overflow: hidden;
  box-shadow: var(--shadow-card);
  transition: var(--transition-smooth);
  min-height: 500px;
  display: flex;
  flex-direction: column;
}

.partnershipCard:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-card-hover);
}

.cardImage {
  flex: 1;
  background: linear-gradient(135deg, hsl(var(--accent)), hsl(var(--accent-light)));
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  position: relative;
}

.appExchangeIllustration {
  position: relative;
  width: 100%;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.mascot {
  font-size: 4rem;
  z-index: 2;
}

.appIcons {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  align-items: center;
  justify-items: center;
}

.appIcon {
  width: 3rem;
  height: 3rem;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  font-weight: bold;
  color: hsl(var(--primary));
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.communityIllustration {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 2rem;
}

.communityMembers {
  display: flex;
  gap: 1rem;
}

.member {
  width: 4rem;
  height: 4rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  backdrop-filter: blur(10px);
}

.cardContent {
  padding: 2rem;
  text-align: left;
}

.cardLabel {
  font-size: 0.875rem;
  font-weight: 600;
  color: hsl(var(--primary));
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.cardTitle {
  font-size: 1.5rem;
  font-weight: bold;
  color: hsl(var(--foreground));
  margin: 1rem 0 2rem 0;
  line-height: 1.3;
}

.cardButton {
  padding: 0.875rem 2rem;
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
}

.cardButton:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

@media (max-width: 768px) {
  .partnershipGrid {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
}

src/components/PartnershipSection.tsx:
import styles from './PartnershipSection.module.css';

const PartnershipSection = () => {
  return (
    <section className={styles.partnershipSection}>
      <div className={styles.partnershipContent}>
        <div className={styles.partnershipGrid}>
          <div className={styles.partnershipCard}>
            <div className={styles.cardImage}>
              <div className={styles.appExchangeIllustration}>
                <div className={styles.mascot}>🐻</div>
                <div className={styles.appIcons}>
                  <div className={styles.appIcon}>C</div>
                  <div className={styles.appIcon}>📦</div>
                  <div className={styles.appIcon}>D</div>
                  <div className={styles.appIcon}>▶</div>
                </div>
              </div>
            </div>
            <div className={styles.cardContent}>
              <span className={styles.cardLabel}>AppExchange</span>
              <h3 className={styles.cardTitle}>
                Get the most out of Stratosuite Cloud with partner apps and experts.
              </h3>
              <button className={styles.cardButton}>Explore partners</button>
            </div>
          </div>

          <div className={styles.partnershipCard}>
            <div className={styles.cardImage}>
              <div className={styles.communityIllustration}>
                <div className={styles.communityMembers}>
                  <div className={styles.member}>👩‍💼</div>
                  <div className={styles.member}>👨‍💻</div>
                </div>
              </div>
            </div>
            <div className={styles.cardContent}>
              <span className={styles.cardLabel}>Community</span>
              <h3 className={styles.cardTitle}>
                Connect with our customers, partners, and product experts.
              </h3>
              <button className={styles.cardButton}>Explore Trailblazer Community</button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default PartnershipSection;

src/components/ProductGrid.module.css:
.productSection {
  padding: 6rem 2rem;
  background: white;
}

.productContent {
  max-width: 1280px;
  margin: 0 auto;
  text-align: center;
}

.sectionTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 1rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.sectionSubtitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 4rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.productGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
  margin-bottom: 3rem;
}

.productCard {
  background: white;
  border-radius: 1rem;
  padding: 2rem;
  box-shadow: var(--shadow-card);
  transition: var(--transition-smooth);
  position: relative;
  overflow: hidden;
  text-align: left;
  color: white;
  min-height: 280px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.productCard:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-card-hover);
}

.productCard.agentforce {
  background: hsl(var(--agent-purple));
}

.productCard.smallBusiness {
  background: hsl(var(--small-business-teal));
}

.productCard.sales {
  background: hsl(var(--sales-green));
}

.productCard.service {
  background: hsl(var(--service-pink));
}

.productCard.marketing {
  background: hsl(var(--marketing-orange));
}

.productCard.commerce {
  background: hsl(var(--commerce-green));
}

.productCard.ai {
  background: hsl(var(--ai-blue));
}

.productCard.dataCloud {
  background: hsl(var(--data-purple));
}

.cardContent {
  flex: 1;
}

.cardTitle {
  font-size: 1.75rem;
  font-weight: bold;
  margin: 0 0 1rem 0;
}

.cardDescription {
  font-size: 1rem;
  line-height: 1.5;
  margin: 0;
  opacity: 0.9;
}

.cardFooter {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 2rem;
}

.cardLink {
  color: white;
  text-decoration: none;
  font-weight: 600;
  border-bottom: 1px solid rgba(255, 255, 255, 0.3);
  transition: border-color 0.2s;
}

.cardLink:hover {
  border-color: white;
}

.cardIcon {
  width: 3rem;
  height: 3rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  backdrop-filter: blur(10px);
}

.allPricing {
  text-align: center;
  margin-top: 3rem;
}

.allPricingButton {
  padding: 0.875rem 2rem;
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
}

.allPricingButton:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

@media (max-width: 768px) {
  .productGrid {
    grid-template-columns: 1fr;
  }
  
  .sectionTitle,
  .sectionSubtitle {
    font-size: 2rem;
  }
}

src/components/ProductGrid.tsx:
import styles from './ProductGrid.module.css';

const ProductGrid = () => {
  const products = [
    {
      id: 'agentforce',
      title: 'CloudBot',
      description: 'Build and customize autonomous AI agents to support your employees and customers 24/7.',
      link: 'Explore CloudBot',
      icon: '🤖'
    },
    {
      id: 'smallBusiness',
      title: 'Small Business',
      description: 'Help small businesses sell smarter and support faster in a single app.',
      link: 'Explore Small Business',
      icon: '🏪'
    },
    {
      id: 'sales',
      title: 'Sales',
      description: 'Connect teams, close more deals, and simplify your sales process.',
      link: 'Explore Sales',
      icon: '📈'
    },
    {
      id: 'service',
      title: 'Service',
      description: 'Manage customer support cases faster across every channel.',
      link: 'Explore Service',
      icon: '❤️'
    },
    {
      id: 'marketing',
      title: 'Marketing',
      description: 'Easily build, personalize, and optimize campaigns and journeys.',
      link: 'Explore Marketing',
      icon: '🎯'
    },
    {
      id: 'commerce',
      title: 'Commerce',
      description: 'Engage buyers online and in-store with B2C and B2B commerce.',
      link: 'Explore Commerce',
      icon: '🛒'
    },
    {
      id: 'ai',
      title: 'Artificial Intelligence',
      description: 'Bring predictive and generative AI experiences to any workflow, user, department, or industry.',
      link: 'Explore AI',
      icon: '🧠'
    },
    {
      id: 'dataCloud',
      title: 'Data Cloud',
      description: 'Unify all your data to power personalized engagement at scale.',
      link: 'Explore Data Cloud',
      icon: '☁️'
    }
  ];

  const additionalProducts = [
    {
      id: 'platform',
      title: 'Stratosuite Platform',
      description: 'Connect your teams and data with apps built in clicks, not code.',
      link: 'Explore Stratosuite Platform',
      icon: '⚡'
    },
    {
      id: 'slack',
      title: 'Slack',
      description: 'Bring agentic productivity to every team with one work operating system.',
      link: 'Explore Slack',
      icon: '#️⃣'
    },
    {
      id: 'analytics',
      title: 'Analytics',
      description: 'Get powerful insights from any data, anytime, anywhere.',
      link: 'Explore Analytics',
      icon: '📊'
    },
    {
      id: 'mulesoft',
      title: 'MuleSoft',
      description: 'Connect any app, data, or device in the cloud or on-premises.',
      link: 'Explore MuleSoft',
      icon: '🔗'
    },
    {
      id: 'heroku',
      title: 'Heroku',
      description: 'Build scalable apps on a cloud-based platform made for developers.',
      link: 'Explore Heroku',
      icon: '🚀'
    },
    {
      id: 'success',
      title: 'Success and Services',
      description: 'Maximize your ROI with self-service resources and trusted guidance from our CRM, AI, and data experts.',
      link: 'Explore Success and Services',
      icon: '👥'
    }
  ];

  return (
    <section className={styles.productSection}>
      <div className={styles.productContent}>
        <h2 className={styles.sectionTitle}>
          Get data, analytics, CRM apps, and agents.
        </h2>
        <h3 className={styles.sectionSubtitle}>
          All on one deeply integrated platform.
        </h3>

        <div className={styles.productGrid}>
          {products.map((product) => (
            <div key={product.id} className={`${styles.productCard} ${styles[product.id]}`}>
              <div className={styles.cardContent}>
                <h3 className={styles.cardTitle}>{product.title}</h3>
                <p className={styles.cardDescription}>{product.description}</p>
              </div>
              <div className={styles.cardFooter}>
                <a href="#" className={styles.cardLink}>{product.link}</a>
                <div className={styles.cardIcon}>{product.icon}</div>
              </div>
            </div>
          ))}
        </div>

        <div className={styles.productGrid}>
          {additionalProducts.map((product) => (
            <div key={product.id} className={`${styles.productCard} ${styles[product.id]}`}>
              <div className={styles.cardContent}>
                <h3 className={styles.cardTitle}>{product.title}</h3>
                <p className={styles.cardDescription}>{product.description}</p>
              </div>
              <div className={styles.cardFooter}>
                <a href="#" className={styles.cardLink}>{product.link}</a>
                <div className={styles.cardIcon}>{product.icon}</div>
              </div>
            </div>
          ))}
        </div>

        <div className={styles.allPricing}>
          <button className={styles.allPricingButton}>See all pricing</button>
        </div>
      </div>
    </section>
  );
};

export default ProductGrid;

src/components/ReportsSection.module.css:
.reportsSection {
  background: linear-gradient(135deg, hsl(220 20% 98%) 0%, hsl(var(--background)) 100%);
  padding: 6rem 2rem;
}

.reportsContent {
  max-width: 1280px;
  margin: 0 auto;
  text-align: center;
}

.sectionTitle {
  font-size: 3rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 2rem 0;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

.seeAllButton {
  padding: 0.875rem 2rem;
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  margin-bottom: 4rem;
}

.seeAllButton:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

.reportsGrid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
}

.reportCard {
  background: white;
  border-radius: 1.5rem;
  overflow: hidden;
  box-shadow: var(--shadow-card);
  transition: var(--transition-smooth);
}

.reportCard:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-card-hover);
}

.reportImage {
  height: 200px;
  background: linear-gradient(135deg, hsl(var(--accent)), hsl(var(--accent-light)));
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.reportIcon {
  font-size: 4rem;
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));
}

.reportContent {
  padding: 2rem;
  text-align: left;
}

.reportTitle {
  font-size: 1.25rem;
  font-weight: bold;
  color: hsl(var(--foreground));
  margin: 0 0 1.5rem 0;
  line-height: 1.4;
}

.reportLink {
  color: hsl(var(--primary));
  font-weight: 600;
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: var(--transition-smooth);
}

.reportLink:hover {
  border-bottom-color: hsl(var(--primary));
}

@media (max-width: 1024px) {
  .reportsGrid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
}

@media (max-width: 768px) {
  .sectionTitle {
    font-size: 2rem;
  }
  
  .reportContent {
    padding: 1.5rem;
  }
}

src/components/ReportsSection.tsx:
import styles from './ReportsSection.module.css';

const ReportsSection = () => {
  const reports = [
    {
      title: 'Stratosuite Cloud is voted the #1 Global Software Company on G2.',
      description: 'Industry recognition for excellence',
      image: '🏆',
      link: 'Get the report'
    },
    {
      title: 'New Valor research reveals how businesses scale AI agents 16x faster with CloudBot.',
      description: 'AI acceleration insights',
      image: '📊',
      link: 'Get the report'
    },
    {
      title: 'Futurum report explains why CloudBot is the fastest path to enterprise value.',
      description: 'Enterprise transformation guide',
      image: '🚀',
      link: 'Get the report'
    }
  ];

  return (
    <section className={styles.reportsSection}>
      <div className={styles.reportsContent}>
        <h2 className={styles.sectionTitle}>
          Hear what the top voices in the industry have to say.
        </h2>
        
        <button className={styles.seeAllButton}>See all reports</button>

        <div className={styles.reportsGrid}>
          {reports.map((report, index) => (
            <div key={index} className={styles.reportCard}>
              <div className={styles.reportImage}>
                <span className={styles.reportIcon}>{report.image}</span>
              </div>
              
              <div className={styles.reportContent}>
                <h3 className={styles.reportTitle}>{report.title}</h3>
                <a href="#" className={styles.reportLink}>{report.link}</a>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ReportsSection;

src/components/StarterSuiteSection.module.css:
.starterSection {
  background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(220 20% 98%) 100%);
  padding: 6rem 2rem;
}

.starterContent {
  max-width: 1280px;
  margin: 0 auto;
}

.sectionHeader {
  text-align: center;
  margin-bottom: 4rem;
}

.sectionTitle {
  font-size: 3rem;
  font-weight: bold;
  margin: 0 0 4rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.starterGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
  margin-bottom: 4rem;
}

.starterLeft {
  background: var(--gradient-teal);
  border-radius: 1.5rem;
  padding: 2rem;
  color: white;
  position: relative;
  overflow: hidden;
  min-height: 400px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.salesTag {
  background: rgba(255, 255, 255, 0.2);
  padding: 0.5rem 1rem;
  border-radius: 2rem;
  font-size: 0.875rem;
  font-weight: 600;
  display: inline-block;
  margin-bottom: 2rem;
  backdrop-filter: blur(10px);
}

.mockupContainer {
  background: white;
  border-radius: 1rem;
  padding: 1rem;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  transform: perspective(1000px) rotateY(-5deg) rotateX(5deg);
  margin-top: 2rem;
}

.mockupScreen {
  background: linear-gradient(135deg, hsl(210 100% 95%) 0%, hsl(220 100% 98%) 100%);
  border-radius: 0.5rem;
  padding: 1rem;
  min-height: 200px;
  position: relative;
}

.playButton {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 4rem;
  height: 4rem;
  background: hsl(210 100% 25%);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.5rem;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  transition: var(--transition-smooth);
}

.playButton:hover {
  transform: translate(-50%, -50%) scale(1.1);
}

.starterRight {
  padding-left: 2rem;
}

.starterTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 1rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.starterDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 1rem 0;
}

.pricingInfo {
  font-size: 1.125rem;
  font-weight: 600;
  margin: 0 0 2rem 0;
}

.pricingAmount {
  color: hsl(210 100% 25%);
}

.pricingLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 600;
}

.pricingLink:hover {
  text-decoration: underline;
}

.tryButton {
  padding: 0.875rem 2rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  box-shadow: var(--shadow-button);
  margin-bottom: 3rem;
}

.tryButton:hover {
  background: hsl(var(--primary-hover));
}

.featuresList {
  space-y: 2rem;
}

.featureItem {
  border-left: 4px solid hsl(var(--primary));
  padding-left: 1.5rem;
  margin-bottom: 2rem;
}

.featureTitle {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 0 0 0.5rem 0;
  color: hsl(var(--primary));
}

.featureDescription {
  color: hsl(var(--muted-foreground));
  line-height: 1.6;
  margin: 0;
}

@media (max-width: 768px) {
  .starterGrid {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .starterRight {
    padding-left: 0;
  }
  
  .sectionTitle,
  .starterTitle {
    font-size: 2rem;
  }
}

src/components/StarterSuiteSection.tsx:
import { Link } from 'react-router-dom';
import styles from './StarterSuiteSection.module.css';

const StarterSuiteSection = () => {
  return (
    <section className={styles.starterSection}>
      <div className={styles.starterContent}>
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>Start simply. Scale endlessly.</h2>
        </div>

        <div className={styles.starterGrid}>
          <div className={styles.starterLeft}>
            <div className={styles.salesTag}>Sales</div>
            <div className={styles.mockupContainer}>
              <div className={styles.mockupScreen}>
                <div className={styles.playButton}>▶</div>
              </div>
            </div>
          </div>

          <div className={styles.starterRight}>
            <h3 className={styles.starterTitle}>
              See results on day one with Starter Suite.
            </h3>
            <p className={styles.starterDescription}>
              Our all-in-one small business solution,{' '}
              <a href="#" className={styles.pricingLink}>Starter Suite</a>, brings 
              sales, service, marketing, and Slack together on a single, 
              easy-to-use app. Set up in a matter of minutes with built-in 
              guidance and easy-to-follow onboarding.
            </p>
            <p className={styles.pricingInfo}>
              <span className={styles.pricingAmount}>$25 USD/user/month</span>{' '}
              <a href="#" className={styles.pricingLink}>See full pricing</a>
            </p>
            <Link to="/try-for-free" className={styles.tryButton}>Try for free</Link>

            <div className={styles.featuresList}>
              <div className={styles.featureItem}>
                <h4 className={styles.featureTitle}>Lead, Contact, and Opportunity Management</h4>
                <p className={styles.featureDescription}>
                  Capture and track customer data from any source. Keep your 
                  team on track with built-in deal stages. Get recommended next 
                  steps to move deals along the pipeline.
                </p>
              </div>

              <div className={styles.featureItem}>
                <h4 className={styles.featureTitle}>Email Marketing</h4>
              </div>

              <div className={styles.featureItem}>
                <h4 className={styles.featureTitle}>Service Case Management</h4>
              </div>

              <div className={styles.featureItem}>
                <h4 className={styles.featureTitle}>Reporting and Analytics</h4>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default StarterSuiteSection;

src/components/SupportSection.module.css:
.supportSection {
  background: linear-gradient(135deg, hsl(220 20% 98%) 0%, hsl(var(--background)) 100%);
  padding: 6rem 2rem;
  position: relative;
  overflow: hidden;
}

.supportContent {
  max-width: 1280px;
  margin: 0 auto;
  text-align: center;
}

.sectionTitle {
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 0 2rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.sectionDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 1rem 0;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

.supportLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 600;
}

.supportLink:hover {
  text-decoration: underline;
}

.includedText {
  font-size: 1.125rem;
  font-weight: 600;
  margin: 2rem 0 3rem 0;
  color: hsl(210 100% 25%);
}

.supportGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 2rem;
  margin-bottom: 4rem;
}

.supportCard {
  background: hsl(45 100% 95%);
  border-radius: 1rem;
  padding: 2rem;
  text-align: center;
}

.cardTitle {
  font-size: 1.25rem;
  font-weight: bold;
  margin: 0 0 1rem 0;
  color: hsl(210 100% 25%);
  line-height: 1.3;
}

.mascotDecor {
  position: absolute;
  bottom: 2rem;
  right: 2rem;
  width: 100px;
  height: 100px;
  background: radial-gradient(circle, hsl(25 100% 70%), hsl(45 100% 60%));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 3rem;
  opacity: 0.3;
}

.landscapeLeft {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 400px;
  height: 150px;
  background: linear-gradient(135deg, hsl(120 60% 70%), hsl(140 80% 60%));
  clip-path: polygon(0 100%, 100% 50%, 100% 100%);
  opacity: 0.1;
}

@media (max-width: 768px) {
  .supportGrid {
    grid-template-columns: 1fr;
  }
  
  .sectionTitle {
    font-size: 2rem;
  }
  
  .mascotDecor {
    width: 80px;
    height: 80px;
    font-size: 2rem;
  }
}

src/components/SupportSection.tsx:
import styles from './SupportSection.module.css';

const SupportSection = () => {
  return (
    <section className={styles.supportSection}>
      <div className={styles.landscapeLeft} />
      <div className={styles.mascotDecor}>🐻</div>
      
      <div className={styles.supportContent}>
        <h2 className={styles.sectionTitle}>Solve problems quickly.</h2>
        
        <p className={styles.sectionDescription}>
          Your success is our top priority. Whatever solution you choose, it comes with free one-
          day ticketing and Stratosuite Cloud alert monitoring, right out of the box. Need more support? 
          We have a variety of{' '}
          <a href="#" className={styles.supportLink}>Success Plans</a> and{' '}
          <a href="#" className={styles.supportLink}>Professional Services</a> offering resources, expert 
          guidance, and the tech support you need to get the most value from Stratosuite Cloud.
        </p>

        <p className={styles.includedText}>Included with all product licenses:</p>

        <div className={styles.supportGrid}>
          <div className={styles.supportCard}>
            <h3 className={styles.cardTitle}>
              24-hour turnaround for technical support tickets
            </h3>
          </div>

          <div className={styles.supportCard}>
            <h3 className={styles.cardTitle}>
              On-demand articles and documentation
            </h3>
          </div>

          <div className={styles.supportCard}>
            <h3 className={styles.cardTitle}>
              Guided online learning to upskill teams
            </h3>
          </div>
        </div>
      </div>
    </section>
  );
};

export default SupportSection;

src/components/TestimonialsSection.module.css:
.testimonialsSection {
  background: white;
  padding: 6rem 2rem;
}

.testimonialsContent {
  max-width: 1280px;
  margin: 0 auto;
  text-align: center;
}

.sectionTitle {
  font-size: 3rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 2rem 0;
}

.sectionSubtitle {
  font-size: 1.75rem;
  font-weight: 600;
  color: hsl(var(--foreground));
  margin: 0 0 1rem 0;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

.sectionDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  max-width: 600px;
  margin: 0 auto 4rem auto;
}

.testimonialsGrid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
}

.testimonialCard {
  background: hsl(var(--primary));
  color: white;
  border-radius: 1.5rem;
  padding: 3rem 2rem;
  text-align: left;
  transition: var(--transition-smooth);
}

.testimonialCard:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-card-hover);
}

.cardHeader {
  margin-bottom: 2rem;
}

.companyName {
  font-size: 1rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  opacity: 0.9;
}

.metricDisplay {
  margin-bottom: 2rem;
}

.metric {
  font-size: 4rem;
  font-weight: bold;
  display: block;
  line-height: 1;
}

.metricDescription {
  font-size: 1.125rem;
  font-weight: 500;
  opacity: 0.9;
}

.testimonialDetail {
  font-size: 1rem;
  line-height: 1.6;
  margin: 0 0 2rem 0;
  opacity: 0.95;
}

.readMoreLink {
  color: white;
  font-weight: 600;
  text-decoration: none;
  border-bottom: 1px solid rgba(255, 255, 255, 0.3);
  transition: var(--transition-smooth);
}

.readMoreLink:hover {
  border-bottom-color: white;
  opacity: 1;
}

@media (max-width: 1024px) {
  .testimonialsGrid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
}

@media (max-width: 768px) {
  .sectionTitle {
    font-size: 2rem;
  }
  
  .sectionSubtitle {
    font-size: 1.25rem;
  }
  
  .testimonialCard {
    padding: 2rem 1.5rem;
  }
  
  .metric {
    font-size: 3rem;
  }
}

src/components/TestimonialsSection.tsx:
import styles from './TestimonialsSection.module.css';

const TestimonialsSection = () => {
  const testimonials = [
    {
      company: 'CloudTech Solutions',
      metric: '50%',
      description: 'boost in productivity',
      detail: 'CloudTech saves time with AI-generated emails.',
      link: 'Read the CloudTech story'
    },
    {
      company: 'DataFlow Systems',
      metric: '80%',
      description: 'reduction in call times',
      detail: 'DataFlow cuts call times with Stratosuite Cloud automation.',
      link: 'Read the DataFlow story'
    },
    {
      company: 'TechVantage',
      metric: '20x',
      description: 'increase in ROI',
      detail: 'TechVantage boosts ROI by personalizing every customer experience.',
      link: 'Read the TechVantage story'
    }
  ];

  return (
    <section className={styles.testimonialsSection}>
      <div className={styles.testimonialsContent}>
        <h2 className={styles.sectionTitle}>Don't just take our word for it.</h2>
        
        <h3 className={styles.sectionSubtitle}>
          See how our customers work smarter, drive automation, and grow revenue.
        </h3>
        
        <p className={styles.sectionDescription}>
          Companies around the globe see eye-popping results with Stratosuite Cloud. You can, too.
        </p>

        <div className={styles.testimonialsGrid}>
          {testimonials.map((testimonial, index) => (
            <div key={index} className={styles.testimonialCard}>
              <div className={styles.cardHeader}>
                <span className={styles.companyName}>{testimonial.company}</span>
              </div>
              
              <div className={styles.metricDisplay}>
                <span className={styles.metric}>{testimonial.metric}</span>
                <span className={styles.metricDescription}>{testimonial.description}</span>
              </div>
              
              <p className={styles.testimonialDetail}>{testimonial.detail}</p>
              
              <a href="#" className={styles.readMoreLink}>{testimonial.link} →</a>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default TestimonialsSection;

src/components/WorkforceSection.module.css:
.workforceSection {
  background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(220 20% 98%) 100%);
  padding: 6rem 2rem;
  text-align: center;
}

.workforceContent {
  max-width: 1280px;
  margin: 0 auto;
}

.workforceTitle {
  font-size: 3rem;
  font-weight: bold;
  margin: 0 0 1.5rem 0;
  line-height: 1.2;
  color: hsl(210 100% 25%);
}

.workforceDescription {
  font-size: 1.125rem;
  line-height: 1.7;
  color: hsl(var(--muted-foreground));
  margin: 0 0 3rem 0;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

.workforceLink {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 600;
}

.workforceLink:hover {
  text-decoration: underline;
}

.workforceActions {
  display: flex;
  gap: 1.5rem;
  justify-content: center;
  margin: 0 0 4rem 0;
}

.exploreButton {
  padding: 0.875rem 2rem;
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
  box-shadow: var(--shadow-button);
}

.exploreButton:hover {
  background: hsl(var(--primary-hover));
}

.calculateButton {
  padding: 0.875rem 2rem;
  background: transparent;
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--primary));
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition-smooth);
}

.calculateButton:hover {
  background: hsl(var(--primary));
  color: hsl(var(--primary-foreground));
}

.trustedBy {
  margin: 2rem 0 0 0;
}

.trustedTitle {
  font-size: 1.25rem;
  font-weight: 600;
  color: hsl(210 100% 25%);
  margin: 0 0 2rem 0;
}

.logoGrid {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 3rem;
  flex-wrap: wrap;
}

.companyLogo {
  font-size: 1.125rem;
  font-weight: 600;
  color: hsl(var(--muted-foreground));
  opacity: 0.7;
  transition: opacity 0.2s;
}

.companyLogo:hover {
  opacity: 1;
}

@media (max-width: 768px) {
  .workforceTitle {
    font-size: 2rem;
  }
  
  .workforceActions {
    flex-direction: column;
    align-items: center;
  }
  
  .logoGrid {
    gap: 1.5rem;
  }
}

src/components/WorkforceSection.tsx:
import styles from './WorkforceSection.module.css';

const WorkforceSection = () => {
  return (
    <section className={styles.workforceSection}>
      <div className={styles.workforceContent}>
        <h2 className={styles.workforceTitle}>
          Create a limitless workforce.<br />
          With CloudBot.
        </h2>
        
        <p className={styles.workforceDescription}>
          Create a digital labor force that works alongside your human workforce.{' '}
          <a href="#" className={styles.workforceLink}>AI agents</a> work 
          24/7, taking action and providing support to employees and customers. Free your 
          people to be more productive, so they can focus on more important stuff.
        </p>

        <div className={styles.workforceActions}>
          <button className={styles.exploreButton}>Explore CloudBot</button>
          <button className={styles.calculateButton}>Calculate your ROI</button>
        </div>

        <div className={styles.trustedBy}>
          <h3 className={styles.trustedTitle}>CloudBot is trusted by:</h3>
          <div className={styles.logoGrid}>
            <div className={styles.companyLogo}>GLOBO</div>
            <div className={styles.companyLogo}>indeed</div>
            <div className={styles.companyLogo}>LENNAR</div>
            <div className={styles.companyLogo}>VF GOLF</div>
            <div className={styles.companyLogo}>OpenTable</div>
            <div className={styles.companyLogo}>PEPSICO</div>
            <div className={styles.companyLogo}>CHICAGO Medicine</div>
            <div className={styles.companyLogo}>WILLIAMS-SONOMA</div>
            <div className={styles.companyLogo}>1-800 ACCOUNTANT</div>
            <div className={styles.companyLogo}>Big Brothers Big Sisters</div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default WorkforceSection;

src/components/ui/accordion.tsx:
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };

src/components/ui/alert-dialog.tsx:
import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};

src/components/ui/alert.tsx:
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h5 ref={ref} className={cn("mb-1 font-medium leading-none tracking-tight", className)} {...props} />
  ),
);
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("text-sm [&_p]:leading-relaxed", className)} {...props} />
  ),
);
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };

src/components/ui/aspect-ratio.tsx:
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };

src/components/ui/avatar.tsx:
import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };

src/components/ui/badge.tsx:
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;
}

export { Badge, badgeVariants };

src/components/ui/breadcrumb.tsx:
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<"ol">>(
  ({ className, ...props }, ref) => (
    <ol
      ref={ref}
      className={cn(
        "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
        className,
      )}
      {...props}
    />
  ),
);
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<"li">>(
  ({ className, ...props }, ref) => (
    <li ref={ref} className={cn("inline-flex items-center gap-1.5", className)} {...props} />
  ),
);
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return <Comp ref={ref} className={cn("transition-colors hover:text-foreground", className)} {...props} />;
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<"span">>(
  ({ className, ...props }, ref) => (
    <span
      ref={ref}
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("font-normal text-foreground", className)}
      {...props}
    />
  ),
);
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<"li">) => (
  <li role="presentation" aria-hidden="true" className={cn("[&>svg]:size-3.5", className)} {...props}>
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({ className, ...props }: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};

src/components/ui/button.tsx:
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

src/components/ui/calendar.tsx:
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(buttonVariants({ variant: "ghost" }), "h-9 w-9 p-0 font-normal aria-selected:opacity-100"),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

src/components/ui/card.tsx:
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
  ),
);
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
  ),
);
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
  ),
);
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />,
);
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
  ),
);
CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };

src/components/ui/carousel.tsx:
import * as React from "react";
import useEmblaCarousel, { type UseEmblaCarouselType } from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>(
  ({ orientation = "horizontal", opts, setApi, plugins, className, children, ...props }, ref) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation: orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { carouselRef, orientation } = useCarousel();

    return (
      <div ref={carouselRef} className="overflow-hidden">
        <div
          ref={ref}
          className={cn("flex", orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col", className)}
          {...props}
        />
      </div>
    );
  },
);
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { orientation } = useCarousel();

    return (
      <div
        ref={ref}
        role="group"
        aria-roledescription="slide"
        className={cn("min-w-0 shrink-0 grow-0 basis-full", orientation === "horizontal" ? "pl-4" : "pt-4", className)}
        {...props}
      />
    );
  },
);
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-left-12 top-1/2 -translate-y-1/2"
            : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
          className,
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        <ArrowLeft className="h-4 w-4" />
        <span className="sr-only">Previous slide</span>
      </Button>
    );
  },
);
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-right-12 top-1/2 -translate-y-1/2"
            : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
          className,
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        <ArrowRight className="h-4 w-4" />
        <span className="sr-only">Next slide</span>
      </Button>
    );
  },
);
CarouselNext.displayName = "CarouselNext";

export { type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };

src/components/ui/chart.tsx:
import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`,
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref,
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return <div className={cn("font-medium", labelClassName)}>{labelFormatter(value, payload)}</div>;
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className,
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center",
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn("shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]", {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          })}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center",
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">{itemConfig?.label || item.name}</span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  },
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
  const { config } = useChart();

  if (!payload?.length) {
    return null;
  }

  return (
    <div
      ref={ref}
      className={cn("flex items-center justify-center gap-4", verticalAlign === "top" ? "pb-3" : "pt-3", className)}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`;
        const itemConfig = getPayloadConfigFromPayload(config, item, key);

        return (
          <div
            key={item.value}
            className={cn("flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground")}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        );
      })}
    </div>
  );
});
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload && typeof payload.payload === "object" && payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (key in payload && typeof payload[key as keyof typeof payload] === "string") {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;
  }

  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];
}

export { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };

src/components/ui/checkbox.tsx:
import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };

src/components/ui/collapsible.tsx:
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };

src/components/ui/command.tsx:
import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";

import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/components/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />);

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};

src/components/ui/context-menu.tsx:
import * as React from "react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold text-foreground", inset && "pl-8", className)}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-border", className)} {...props} />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};

src/components/ui/dialog.tsx:
import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-accent data-[state=open]:text-muted-foreground hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};

src/components/ui/drawer.tsx:
import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({ shouldScaleBackground = true, ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay ref={ref} className={cn("fixed inset-0 z-50 bg-black/80", className)} {...props} />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)} {...props} />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};

src/components/ui/dropdown-menu.tsx:
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent focus:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />;
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};

src/components/ui/form.tsx:
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);

const FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const id = React.useId();

    return (
      <FormItemContext.Provider value={{ id }}>
        <div ref={ref} className={cn("space-y-2", className)} {...props} />
      </FormItemContext.Provider>
    );
  },
);
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return <Label ref={ref} className={cn(error && "text-destructive", className)} htmlFor={formItemId} {...props} />;
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(
  ({ ...props }, ref) => {
    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

    return (
      <Slot
        ref={ref}
        id={formItemId}
        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}
        aria-invalid={!!error}
        {...props}
      />
    );
  },
);
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => {
    const { formDescriptionId } = useFormField();

    return <p ref={ref} id={formDescriptionId} className={cn("text-sm text-muted-foreground", className)} {...props} />;
  },
);
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, children, ...props }, ref) => {
    const { error, formMessageId } = useFormField();
    const body = error ? String(error?.message) : children;

    if (!body) {
      return null;
    }

    return (
      <p ref={ref} id={formMessageId} className={cn("text-sm font-medium text-destructive", className)} {...props}>
        {body}
      </p>
    );
  },
);
FormMessage.displayName = "FormMessage";

export { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };

src/components/ui/hover-card.tsx:
import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "@/lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };

src/components/ui/input-otp.tsx:
import * as React from "react";
import { OTPInput, OTPInputContext } from "input-otp";
import { Dot } from "lucide-react";

import { cn } from "@/lib/utils";

const InputOTP = React.forwardRef<React.ElementRef<typeof OTPInput>, React.ComponentPropsWithoutRef<typeof OTPInput>>(
  ({ className, containerClassName, ...props }, ref) => (
    <OTPInput
      ref={ref}
      containerClassName={cn("flex items-center gap-2 has-[:disabled]:opacity-50", containerClassName)}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  ),
);
InputOTP.displayName = "InputOTP";

const InputOTPGroup = React.forwardRef<React.ElementRef<"div">, React.ComponentPropsWithoutRef<"div">>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("flex items-center", className)} {...props} />,
);
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink h-4 w-px bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = React.forwardRef<React.ElementRef<"div">, React.ComponentPropsWithoutRef<"div">>(
  ({ ...props }, ref) => (
    <div ref={ref} role="separator" {...props}>
      <Dot />
    </div>
  ),
);
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };

src/components/ui/input.tsx:
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

src/components/ui/label.tsx:
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70");

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };

src/components/ui/menubar.tsx:
import * as React from "react";
import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn("flex h-10 items-center space-x-1 rounded-md border bg-background p-1", className)}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(({ className, align = "start", alignOffset = -4, sideOffset = 8, ...props }, ref) => (
  <MenubarPrimitive.Portal>
    <MenubarPrimitive.Content
      ref={ref}
      align={align}
      alignOffset={alignOffset}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </MenubarPrimitive.Portal>
));
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};

src/components/ui/navigation-menu.tsx:
import * as React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn("relative z-10 flex max-w-max flex-1 items-center justify-center", className)}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn("group flex flex-1 list-none items-center justify-center space-x-1", className)}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};

src/components/ui/pagination.tsx:
import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";
import { ButtonProps, buttonVariants } from "@/components/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul ref={ref} className={cn("flex flex-row items-center gap-1", className)} {...props} />
  ),
);
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({ className, isActive, size = "icon", ...props }: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className,
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink aria-label="Go to previous page" size="default" className={cn("gap-1 pl-2.5", className)} {...props}>
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink aria-label="Go to next page" size="default" className={cn("gap-1 pr-2.5", className)} {...props}>
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({ className, ...props }: React.ComponentProps<"span">) => (
  <span aria-hidden className={cn("flex h-9 w-9 items-center justify-center", className)} {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};

src/components/ui/popover.tsx:
import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };

src/components/ui/progress.tsx:
import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };

src/components/ui/radio-group.tsx:
import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return <RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />;
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };

src/components/ui/resizable.tsx:
import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };

src/components/ui/scroll-area.tsx:
import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">{children}</ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };

src/components/ui/select.tsx:
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label ref={ref} className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)} {...props} />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};

src/components/ui/separator.tsx:
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = "horizontal", decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn("shrink-0 bg-border", orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]", className)}
    {...props}
  />
));
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };

src/components/ui/sheet.tsx:
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";
import * as React from "react";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps>(
  ({ side = "right", className, children, ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
        {children}
        <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-secondary hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  ),
);
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title ref={ref} className={cn("text-lg font-semibold text-foreground", className)} {...props} />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetOverlay,
  SheetPortal,
  SheetTitle,
  SheetTrigger,
};

src/components/ui/sidebar.tsx:
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";

import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar:state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open],
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed";

  const contextValue = React.useMemo<SidebarContext>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn("group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar", className)}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
});
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
  }
>(({ side = "left", variant = "sidebar", collapsible = "offcanvas", className, children, ...props }, ref) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === "none") {
    return (
      <div
        className={cn("flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground", className)}
        ref={ref}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-mobile="true"
          className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      ref={ref}
      className="group peer hidden text-sidebar-foreground md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
        )}
      />
      <div
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
        >
          {children}
        </div>
      </div>
    </div>
  );
});
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(
  ({ className, onClick, ...props }, ref) => {
    const { toggleSidebar } = useSidebar();

    return (
      <Button
        ref={ref}
        data-sidebar="trigger"
        variant="ghost"
        size="icon"
        className={cn("h-7 w-7", className)}
        onClick={(event) => {
          onClick?.(event);
          toggleSidebar();
        }}
        {...props}
      >
        <PanelLeft />
        <span className="sr-only">Toggle Sidebar</span>
      </Button>
    );
  },
);
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button">>(
  ({ className, ...props }, ref) => {
    const { toggleSidebar } = useSidebar();

    return (
      <button
        ref={ref}
        data-sidebar="rail"
        aria-label="Toggle Sidebar"
        tabIndex={-1}
        onClick={toggleSidebar}
        title="Toggle Sidebar"
        className={cn(
          "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex",
          "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
          "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
          "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
          "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
          "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<"main">>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className,
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(
  ({ className, ...props }, ref) => {
    return (
      <Input
        ref={ref}
        data-sidebar="input"
        className={cn(
          "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="header" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="footer" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(
  ({ className, ...props }, ref) => {
    return (
      <Separator
        ref={ref}
        data-sidebar="separator"
        className={cn("mx-2 w-auto bg-sidebar-border", className)}
        {...props}
      />
    );
  },
);
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<"div"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "div";

    return (
      <Comp
        ref={ref}
        data-sidebar="group-label"
        className={cn(
          "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";

    return (
      <Comp
        ref={ref}
        data-sidebar="group-action"
        className={cn(
          "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          // Increases the hit area of the button on mobile.
          "after:absolute after:-inset-2 after:md:hidden",
          "group-data-[collapsible=icon]:hidden",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div ref={ref} data-sidebar="group-content" className={cn("w-full text-sm", className)} {...props} />
  ),
);
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(({ className, ...props }, ref) => (
  <ul ref={ref} data-sidebar="menu" className={cn("flex w-full min-w-0 flex-col gap-1", className)} {...props} />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => (
  <li ref={ref} data-sidebar="menu-item" className={cn("group/menu-item relative", className)} {...props} />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(({ asChild = false, isActive = false, variant = "default", size = "default", tooltip, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      ref={ref}
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent side="right" align="center" hidden={state !== "collapsed" || isMobile} {...tooltip} />
    </Tooltip>
  );
});
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-sidebar="menu-badge"
      className={cn(
        "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
);
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul
      ref={ref}
      data-sidebar="menu-sub"
      className={cn(
        "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
);
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ ...props }, ref) => (
  <li ref={ref} {...props} />
));
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};

src/components/ui/skeleton.tsx:
import { cn } from "@/lib/utils";

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("animate-pulse rounded-md bg-muted", className)} {...props} />;
}

export { Skeleton };

src/components/ui/slider.tsx:
import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "@/lib/utils";

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };

src/components/ui/sonner.tsx:
import { useTheme } from "next-themes";
import { Toaster as Sonner, toast } from "sonner";

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};

export { Toaster, toast };

src/components/ui/switch.tsx:
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };

src/components/ui/table.tsx:
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
  ({ className, ...props }, ref) => (
    <div className="relative w-full overflow-auto">
      <table ref={ref} className={cn("w-full caption-bottom text-sm", className)} {...props} />
    </div>
  ),
);
Table.displayName = "Table";

const TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />,
);
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tbody ref={ref} className={cn("[&_tr:last-child]:border-0", className)} {...props} />
  ),
);
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tfoot ref={ref} className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)} {...props} />
  ),
);
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(
  ({ className, ...props }, ref) => (
    <tr
      ref={ref}
      className={cn("border-b transition-colors data-[state=selected]:bg-muted hover:bg-muted/50", className)}
      {...props}
    />
  ),
);
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <th
      ref={ref}
      className={cn(
        "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
        className,
      )}
      {...props}
    />
  ),
);
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <td ref={ref} className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)} {...props} />
  ),
);
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(
  ({ className, ...props }, ref) => (
    <caption ref={ref} className={cn("mt-4 text-sm text-muted-foreground", className)} {...props} />
  ),
);
TableCaption.displayName = "TableCaption";

export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };

src/components/ui/tabs.tsx:
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };

src/components/ui/textarea.tsx:
import * as React from "react";

import { cn } from "@/lib/utils";

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = "Textarea";

export { Textarea };

src/components/ui/toast.tsx:
import * as React from "react";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive: "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />;
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors group-[.destructive]:border-muted/40 hover:bg-secondary group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 group-[.destructive]:focus:ring-destructive disabled:pointer-events-none disabled:opacity-50",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity group-hover:opacity-100 group-[.destructive]:text-red-300 hover:text-foreground group-[.destructive]:hover:text-red-50 focus:opacity-100 focus:outline-none focus:ring-2 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold", className)} {...props} />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};

src/components/ui/toaster.tsx:
import { useToast } from "@/hooks/use-toast";
import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from "@/components/ui/toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && <ToastDescription>{description}</ToastDescription>}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}

src/components/ui/toggle-group.tsx:
import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { toggleVariants } from "@/components/ui/toggle";

const ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> & VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root ref={ref} className={cn("flex items-center justify-center gap-1", className)} {...props}>
    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> & VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };

src/components/ui/toggle.tsx:
import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline: "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };

src/components/ui/tooltip.tsx:
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };

src/components/ui/use-toast.ts:
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };

src/hooks/use-mobile.tsx:
import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}

src/hooks/use-toast.ts:
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };

src/index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Stratosuite Cloud Design System - All colors, gradients, fonts, etc defined here */

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 220 20% 20%;

    --card: 0 0% 100%;
    --card-foreground: 220 20% 20%;

    --popover: 0 0% 100%;
    --popover-foreground: 220 20% 20%;

    /* Stratosuite Blue Brand Colors */
    --primary: 210 100% 45%;
    --primary-foreground: 0 0% 100%;
    --primary-hover: 210 100% 40%;

    --secondary: 220 20% 96%;
    --secondary-foreground: 220 20% 20%;

    --muted: 220 13% 91%;
    --muted-foreground: 220 8% 46%;

    --accent: 220 13% 91%;
    --accent-foreground: 220 20% 20%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 100%;

    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 210 100% 45%;

    --radius: 0.75rem;

    /* Stratosuite Product Colors */
    --agent-purple: 270 80% 55%;
    --small-business-teal: 180 100% 35%;
    --sales-green: 160 100% 35%;
    --service-pink: 330 80% 55%;
    --marketing-orange: 25 100% 50%;
    --commerce-green: 140 60% 40%;
    --ai-blue: 220 100% 60%;
    --data-purple: 250 70% 50%;
    --platform-indigo: 240 70% 45%;
    --slack-purple: 280 100% 40%;
    --analytics-red: 10 100% 55%;
    --mulesoft-blue: 200 100% 45%;
    --heroku-purple: 270 90% 45%;
    --success-teal: 170 100% 35%;

    /* Gradients */
    --gradient-hero: linear-gradient(135deg, hsl(210 100% 45%), hsl(270 80% 55%));
    --gradient-purple: linear-gradient(135deg, hsl(270 80% 55%), hsl(250 70% 50%));
    --gradient-blue: linear-gradient(135deg, hsl(210 100% 45%), hsl(220 100% 60%));
    --gradient-teal: linear-gradient(135deg, hsl(180 100% 35%), hsl(170 100% 35%));

    /* Shadows */
    --shadow-card: 0 4px 12px hsl(220 20% 20% / 0.1);
    --shadow-card-hover: 0 8px 24px hsl(220 20% 20% / 0.15);
    --shadow-button: 0 2px 8px hsl(210 100% 45% / 0.2);

    /* Transitions */
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .dark {
    --background: 220 20% 10%;
    --foreground: 0 0% 95%;

    --card: 220 20% 10%;
    --card-foreground: 0 0% 95%;

    --popover: 220 20% 10%;
    --popover-foreground: 0 0% 95%;

    --primary: 210 100% 60%;
    --primary-foreground: 220 20% 10%;
    --primary-hover: 210 100% 55%;

    --secondary: 220 20% 15%;
    --secondary-foreground: 0 0% 95%;

    --muted: 220 20% 15%;
    --muted-foreground: 220 8% 65%;

    --accent: 220 20% 15%;
    --accent-foreground: 0 0% 95%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 95%;

    --border: 220 20% 15%;
    --input: 220 20% 15%;
    --ring: 210 100% 60%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  h1, h2, h3, h4, h5, h6 {
    font-weight: 700;
    line-height: 1.2;
  }

  a {
    color: hsl(var(--primary));
    transition: var(--transition-smooth);
  }

  button {
    font-family: inherit;
  }
}

src/lib/utils.ts:
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

src/main.tsx:
import { createRoot } from "react-dom/client";
import App from "./App.tsx";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);

src/pages/Index.tsx:
import Header from '../components/Header';
import HeroSection from '../components/HeroSection';
import WorkforceSection from '../components/WorkforceSection';
import StarterSuiteSection from '../components/StarterSuiteSection';
import ProductGrid from '../components/ProductGrid';
import IndustrySection from '../components/IndustrySection';
import AboutSection from '../components/AboutSection';
import CaseStudySection from '../components/CaseStudySection';
import IntegrationSection from '../components/IntegrationSection';
import SupportSection from '../components/SupportSection';
import LearningSection from '../components/LearningSection';
import PartnershipSection from '../components/PartnershipSection';
import TestimonialsSection from '../components/TestimonialsSection';
import ReportsSection from '../components/ReportsSection';
import GetStartedSection from '../components/GetStartedSection';
import FinalCTASection from '../components/FinalCTASection';
import Footer from '../components/Footer';

const Index = () => {
  return (
    <>
      <Header />
      <HeroSection />
      <WorkforceSection />
      <StarterSuiteSection />
      <ProductGrid />
      <IndustrySection />
      <AboutSection />
      <CaseStudySection />
      <IntegrationSection />
      <SupportSection />
      <LearningSection />
      <PartnershipSection />
      <TestimonialsSection />
      <ReportsSection />
      <GetStartedSection />
      <FinalCTASection />
      <Footer />
    </>
  );
};

export default Index;

src/pages/NotFound.tsx:
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error("404 Error: User attempted to access non-existent route:", location.pathname);
  }, [location.pathname]);

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="mb-4 text-4xl font-bold">404</h1>
        <p className="mb-4 text-xl text-gray-600">Oops! Page not found</p>
        <a href="/" className="text-blue-500 underline hover:text-blue-700">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;

src/pages/TryForFree.module.css:
.container {
  min-height: 100vh;
  background: linear-gradient(135deg, hsl(210 25% 95%) 0%, hsl(220 15% 92%) 100%);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  position: relative;
}

.formCard {
  background: white;
  border-radius: 1rem;
  padding: 3rem;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  max-width: 500px;
  width: 100%;
  text-align: center;
  margin-bottom: 4rem;
}

.logoContainer {
  display: flex;
  justify-content: center;
  margin-bottom: 2rem;
}

.logoIcon {
  width: 3rem;
  height: 3rem;
  background: hsl(var(--primary));
  border-radius: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-size: 1.5rem;
}

.title {
  font-size: 2.25rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 1.5rem 0;
  line-height: 1.2;
}

.subtitle {
  font-size: 1.125rem;
  color: hsl(var(--foreground));
  margin: 0 0 1rem 0;
  font-weight: 600;
}

.description {
  font-size: 1rem;
  color: hsl(var(--muted-foreground));
  margin: 0 0 2rem 0;
  line-height: 1.5;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.input {
  padding: 1rem;
  border: 2px solid hsl(var(--border));
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: border-color 0.2s;
  background: white;
}

.input:focus {
  outline: none;
  border-color: hsl(var(--primary));
}

.input::placeholder {
  color: hsl(var(--muted-foreground));
}

.submitButton {
  background: hsl(var(--primary));
  color: white;
  border: none;
  padding: 1rem;
  border-radius: 0.5rem;
  font-size: 1.125rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s;
  margin-top: 1rem;
}

.submitButton:hover {
  background: hsl(var(--primary-hover));
}

.progressIndicator {
  text-align: center;
  color: hsl(var(--muted-foreground));
  font-size: 0.875rem;
  margin-top: 1rem;
}

.footer {
  position: absolute;
  bottom: 120px;
  left: 0;
  right: 0;
  padding: 0 2rem;
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  max-width: 1200px;
  margin: 0 auto;
}

.footerContent {
  max-width: 600px;
}

.footerText {
  font-size: 0.875rem;
  color: hsl(var(--muted-foreground));
  line-height: 1.4;
  margin: 0 0 0.5rem 0;
}

.footerSubtext {
  font-size: 0.875rem;
  color: hsl(var(--muted-foreground));
  margin: 0;
}

.trustBadge {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: white;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.trustIcon {
  font-size: 1.5rem;
}

.trustText {
  font-size: 0.75rem;
  color: hsl(var(--foreground));
  line-height: 1.2;
}

.globalFooter {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: hsl(var(--primary));
  color: white;
  padding: 1.5rem 2rem;
}

.globalFooterContent {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  margin-bottom: 1rem;
}

.worldwideDropdown {
  font-size: 0.875rem;
  cursor: pointer;
}

.footerLinks {
  display: flex;
  gap: 1.5rem;
  flex-wrap: wrap;
}

.footerLink {
  color: white;
  text-decoration: none;
  font-size: 0.875rem;
  transition: opacity 0.2s;
}

.footerLink:hover {
  opacity: 0.8;
}

.copyright {
  font-size: 0.75rem;
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.4;
  max-width: 1200px;
  margin: 0 auto;
}

@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }
  
  .formCard {
    padding: 2rem;
  }
  
  .title {
    font-size: 1.875rem;
  }
  
  .footer {
    position: static;
    flex-direction: column;
    gap: 1rem;
    text-align: center;
    margin-top: 2rem;
  }
  
  .globalFooterContent {
    flex-direction: column;
    gap: 1rem;
  }
  
  .footerLinks {
    justify-content: center;
    gap: 1rem;
  }
}

src/pages/TryForFree.tsx:
import { useState } from 'react';
import styles from './TryForFree.module.css';

const TryForFree = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    jobTitle: ''
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
  };

  return (
    <div className={styles.container}>
      <div className={styles.formCard}>
        <div className={styles.logoContainer}>
          <div className={styles.logoIcon}>S</div>
        </div>
        
        <h1 className={styles.title}>Let's get you in to your free trial.</h1>
        
        <p className={styles.subtitle}>
          30-day trial. No credit card required, no software to install. Just takes a few minutes.
        </p>
        
        <p className={styles.description}>
          Complete the form to start your free trial. Our team will be in touch to help you make the most of your trial.
        </p>
        
        <form onSubmit={handleSubmit} className={styles.form}>
          <input
            type="text"
            name="firstName"
            placeholder="First name"
            value={formData.firstName}
            onChange={handleInputChange}
            className={styles.input}
            required
          />
          
          <input
            type="text"
            name="lastName"
            placeholder="Last name"
            value={formData.lastName}
            onChange={handleInputChange}
            className={styles.input}
            required
          />
          
          <input
            type="text"
            name="jobTitle"
            placeholder="Job title"
            value={formData.jobTitle}
            onChange={handleInputChange}
            className={styles.input}
            required
          />
          
          <button type="submit" className={styles.submitButton}>
            Next
          </button>
          
          <div className={styles.progressIndicator}>
            1 of 3
          </div>
        </form>
      </div>
      
      <div className={styles.footer}>
        <div className={styles.footerContent}>
          <p className={styles.footerText}>
            Starting at $25/month.* Stratosuite may establish general practices and limits concerning use of the Stratosuite 
            Starter service, including, without limitation the maximum number of combined Leads and Contacts, which is 
            limited to 2,000 leads and/or contacts and 10 emails per day for the Stratosuite Starter Trial Edition.
          </p>
          <p className={styles.footerSubtext}>
            *USD/user/month (billed monthly or annually).
          </p>
        </div>
        
        <div className={styles.trustBadge}>
          <div className={styles.trustIcon}>🛡️</div>
          <div className={styles.trustText}>
            <div>TRUSTe</div>
            <div>Verified Privacy</div>
            <div>Powered by TrustArc</div>
          </div>
        </div>
      </div>
      
      <div className={styles.globalFooter}>
        <div className={styles.globalFooterContent}>
          <div className={styles.worldwideDropdown}>
            🌐 Worldwide ▼
          </div>
          
          <div className={styles.footerLinks}>
            <a href="#" className={styles.footerLink}>Legal</a>
            <a href="#" className={styles.footerLink}>Terms of Service</a>
            <a href="#" className={styles.footerLink}>Privacy Information</a>
            <a href="#" className={styles.footerLink}>Responsible Disclosure</a>
            <a href="#" className={styles.footerLink}>Trust</a>
            <a href="#" className={styles.footerLink}>Contact</a>
            <a href="#" className={styles.footerLink}>Cookie Preferences</a>
            <a href="#" className={styles.footerLink}>🔗 Your Privacy Choices</a>
          </div>
        </div>
        
        <div className={styles.copyright}>
          © Copyright 2025 Stratosuite, Inc. All rights reserved. Various trademarks held by their respective owners. Stratosuite, Inc. Stratosuite Tower, 415 Mission Street, 3rd Floor, San Francisco, CA 94105, United States
        </div>
      </div>
    </div>
  );
};

export default TryForFree;

src/pages/WatchDemo.module.css:
.container {
  min-height: 100vh;
  background: linear-gradient(135deg, #87CEEB 0%, #E0F6FF 50%, #87CEEB 100%);
  display: grid;
  grid-template-columns: 1fr 1fr;
  position: relative;
  overflow-x: hidden;
}

.leftSection {
  padding: 4rem 3rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  position: relative;
}

.logoContainer {
  display: flex;
  margin-bottom: 2rem;
}

.logoIcon {
  width: 3rem;
  height: 3rem;
  background: hsl(var(--primary));
  border-radius: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-size: 1.5rem;
}

.title {
  font-size: 3rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 1.5rem 0;
  line-height: 1.1;
}

.subtitle {
  font-size: 1.25rem;
  color: hsl(var(--foreground));
  margin: 0 0 2rem 0;
  line-height: 1.4;
}

.demoTitle {
  font-size: 1.125rem;
  font-weight: 600;
  color: hsl(var(--foreground));
  margin: 0 0 1.5rem 0;
}

.featureList {
  list-style: none;
  padding: 0;
  margin: 0 0 2rem 0;
}

.featureItem {
  font-size: 1rem;
  color: hsl(var(--foreground));
  margin-bottom: 1rem;
  line-height: 1.4;
}

.contactInfo {
  font-size: 1rem;
  font-weight: 600;
  color: hsl(var(--foreground));
  margin: 0 0 3rem 0;
}

.illustrationContainer {
  position: relative;
  margin-top: auto;
}

.businessOwner {
  position: relative;
  display: flex;
  align-items: center;
  gap: 2rem;
}

.personImage {
  width: 120px;
  height: 120px;
  background: linear-gradient(135deg, #FF6B6B, #4ECDC4);
  border-radius: 50%;
  border: 4px solid white;
}

.statsCard {
  background: hsl(var(--primary));
  color: white;
  padding: 1rem 1.5rem;
  border-radius: 50px;
  text-align: center;
}

.statNumber {
  font-size: 2rem;
  font-weight: bold;
}

.statLabel {
  font-size: 0.875rem;
}

.productTags {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  position: absolute;
  left: -50px;
  top: -80px;
}

.tag {
  display: inline-block;
  padding: 0.5rem 1rem;
  border-radius: 25px;
  color: white;
  font-weight: 500;
  font-size: 0.875rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.rightSection {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  padding: 4rem 3rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.formCard {
  width: 100%;
  max-width: 500px;
}

.formTitle {
  font-size: 1.5rem;
  font-weight: bold;
  color: hsl(var(--primary));
  margin: 0 0 2rem 0;
  text-align: center;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.inputRow {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

.input {
  padding: 1rem;
  border: 2px solid hsl(var(--border));
  border-radius: 0.375rem;
  font-size: 1rem;
  transition: border-color 0.2s;
  background: white;
}

.input:focus {
  outline: none;
  border-color: hsl(var(--primary));
}

.input::placeholder {
  color: hsl(var(--muted-foreground));
}

.selectContainer {
  position: relative;
}

.selectLabel {
  display: block;
  font-size: 0.875rem;
  color: hsl(var(--foreground));
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.select {
  width: 100%;
  padding: 1rem;
  border: 2px solid #FF6B6B;
  border-radius: 0.375rem;
  font-size: 1rem;
  background: white;
  cursor: pointer;
}

.errorIndicator {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #FF6B6B;
  font-size: 1.25rem;
}

.countryContainer {
  position: relative;
}

.countryLabel {
  display: block;
  font-size: 0.875rem;
  color: hsl(var(--foreground));
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.countrySelect {
  width: 100%;
  padding: 1rem;
  border: 2px solid hsl(var(--border));
  border-radius: 0.375rem;
  font-size: 1rem;
  background: white;
  cursor: pointer;
}

.privacyText {
  font-size: 0.875rem;
  color: hsl(var(--muted-foreground));
  margin: 1rem 0;
  line-height: 1.4;
}

.privacyLink {
  color: hsl(var(--primary));
  text-decoration: none;
}

.privacyLink:hover {
  text-decoration: underline;
}

.submitButton {
  background: hsl(var(--primary));
  color: white;
  border: none;
  padding: 1rem;
  border-radius: 0.375rem;
  font-size: 1.125rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s;
  margin-top: 1rem;
}

.submitButton:hover {
  background: hsl(var(--primary-hover));
}

.chatWidget {
  position: fixed;
  bottom: 2rem;
  right: 2rem;
  z-index: 1000;
}

.chatIcon {
  background: hsl(var(--primary));
  color: white;
  padding: 1rem 1.5rem;
  border-radius: 50px;
  font-weight: 500;
  cursor: pointer;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  transition: transform 0.2s;
}

.chatIcon:hover {
  transform: translateY(-2px);
}

.globalFooter {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: hsl(var(--primary));
  color: white;
  padding: 1.5rem 2rem;
}

.globalFooterContent {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  margin-bottom: 1rem;
}

.worldwideDropdown {
  font-size: 0.875rem;
  cursor: pointer;
}

.footerLinks {
  display: flex;
  gap: 1.5rem;
  flex-wrap: wrap;
}

.footerLink {
  color: white;
  text-decoration: none;
  font-size: 0.875rem;
  transition: opacity 0.2s;
}

.footerLink:hover {
  opacity: 0.8;
}

.copyright {
  font-size: 0.75rem;
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.4;
  max-width: 1200px;
  margin: 0 auto;
}

.trustBadge {
  position: fixed;
  bottom: 2rem;
  left: 2rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: white;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  z-index: 1000;
}

.trustIcon {
  font-size: 1.5rem;
}

.trustText {
  font-size: 0.75rem;
  color: hsl(var(--foreground));
  line-height: 1.2;
}

@media (max-width: 1024px) {
  .container {
    grid-template-columns: 1fr;
    grid-template-rows: auto auto;
  }
  
  .leftSection {
    padding: 3rem 2rem;
  }
  
  .rightSection {
    padding: 3rem 2rem;
  }
  
  .title {
    font-size: 2.5rem;
  }
  
  .inputRow {
    grid-template-columns: 1fr;
  }
  
  .trustBadge,
  .chatWidget {
    position: static;
    margin: 1rem;
  }
}

@media (max-width: 768px) {
  .leftSection {
    padding: 2rem 1rem;
  }
  
  .rightSection {
    padding: 2rem 1rem;
  }
  
  .title {
    font-size: 2rem;
  }
  
  .globalFooterContent {
    flex-direction: column;
    gap: 1rem;
  }
  
  .footerLinks {
    justify-content: center;
    gap: 1rem;
  }
}

src/pages/WatchDemo.tsx:
import { useState } from 'react';
import styles from './WatchDemo.module.css';

const WatchDemo = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    jobTitle: '',
    email: '',
    employees: '',
    phone: '',
    country: 'United States'
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
  };

  return (
    <div className={styles.container}>
      <div className={styles.leftSection}>
        <div className={styles.logoContainer}>
          <div className={styles.logoIcon}>S</div>
        </div>
        
        <h1 className={styles.title}>
          Find more leads, win more deals, and keep customers happy.
        </h1>
        
        <p className={styles.subtitle}>
          Grow your small business faster and build lifelong customer relationships all on one platform.
        </p>
        
        <h3 className={styles.demoTitle}>Watch our demos to see how we can help you:</h3>
        
        <ul className={styles.featureList}>
          <li className={styles.featureItem}>
            ✓ Build engaging campaigns that quickly turn prospects into customers
          </li>
          <li className={styles.featureItem}>
            ✓ Close more deals with an organized, repeatable sales process
          </li>
          <li className={styles.featureItem}>
            ✓ Track, prioritize, and respond to support issues on every channel
          </li>
          <li className={styles.featureItem}>
            ✓ Grow your way with customization, ready-to-go apps, free training, live experts, and more
          </li>
        </ul>
        
        <p className={styles.contactInfo}>
          Questions? Call us at 1-800-667-6389.
        </p>
        
        <div className={styles.illustrationContainer}>
          <div className={styles.businessOwner}>
            <div className={styles.personImage}></div>
            <div className={styles.statsCard}>
              <div className={styles.statNumber}>25%</div>
              <div className={styles.statLabel}>Increase in revenue*</div>
            </div>
          </div>
          
          <div className={styles.productTags}>
            <span className={styles.tag} style={{ background: '#00D4AA' }}>💼 sales</span>
            <span className={styles.tag} style={{ background: '#FF6B6B' }}>❤️ service</span>
            <span className={styles.tag} style={{ background: '#FFB800' }}>📊 marketing</span>
          </div>
        </div>
      </div>
      
      <div className={styles.rightSection}>
        <div className={styles.formCard}>
          <h2 className={styles.formTitle}>Fill out one form to unlock all our resources.</h2>
          
          <form onSubmit={handleSubmit} className={styles.form}>
            <div className={styles.inputRow}>
              <input
                type="text"
                name="firstName"
                placeholder="First name"
                value={formData.firstName}
                onChange={handleInputChange}
                className={styles.input}
                required
              />
              <input
                type="text"
                name="lastName"
                placeholder="Last name"
                value={formData.lastName}
                onChange={handleInputChange}
                className={styles.input}
                required
              />
            </div>
            
            <div className={styles.inputRow}>
              <input
                type="text"
                name="jobTitle"
                placeholder="Job title"
                value={formData.jobTitle}
                onChange={handleInputChange}
                className={styles.input}
                required
              />
              <input
                type="email"
                name="email"
                placeholder="Email"
                value={formData.email}
                onChange={handleInputChange}
                className={styles.input}
                required
              />
            </div>
            
            <div className={styles.selectContainer}>
              <label className={styles.selectLabel}>Employees</label>
              <select
                name="employees"
                value={formData.employees}
                onChange={handleInputChange}
                className={styles.select}
                required
              >
                <option value="">Select the number of employees</option>
                <option value="1-10">1-10</option>
                <option value="11-50">11-50</option>
                <option value="51-200">51-200</option>
                <option value="201-1000">201-1000</option>
                <option value="1000+">1000+</option>
              </select>
              {!formData.employees && <div className={styles.errorIndicator}>⚠</div>}
            </div>
            
            <div className={styles.inputRow}>
              <input
                type="tel"
                name="phone"
                placeholder="Phone"
                value={formData.phone}
                onChange={handleInputChange}
                className={styles.input}
                required
              />
              <div className={styles.countryContainer}>
                <label className={styles.countryLabel}>Country/Region</label>
                <select
                  name="country"
                  value={formData.country}
                  onChange={handleInputChange}
                  className={styles.countrySelect}
                >
                  <option value="United States">United States ✓</option>
                  <option value="Canada">Canada</option>
                  <option value="United Kingdom">United Kingdom</option>
                  <option value="Australia">Australia</option>
                </select>
              </div>
            </div>
            
            <p className={styles.privacyText}>
              We value your privacy. To learn more, visit our <a href="#" className={styles.privacyLink}>Privacy Statement</a>.
            </p>
            
            <button type="submit" className={styles.submitButton}>
              WATCH NOW
            </button>
          </form>
        </div>
      </div>
      
      <div className={styles.chatWidget}>
        <div className={styles.chatIcon}>💬 Ask Agentforce</div>
      </div>
      
      <div className={styles.globalFooter}>
        <div className={styles.globalFooterContent}>
          <div className={styles.worldwideDropdown}>
            🌐 Worldwide ▼
          </div>
          
          <div className={styles.footerLinks}>
            <a href="#" className={styles.footerLink}>Legal</a>
            <a href="#" className={styles.footerLink}>Terms of Service</a>
            <a href="#" className={styles.footerLink}>Privacy Information</a>
            <a href="#" className={styles.footerLink}>Responsible Disclosure</a>
            <a href="#" className={styles.footerLink}>Trust</a>
            <a href="#" className={styles.footerLink}>Contact</a>
            <a href="#" className={styles.footerLink}>Cookie Preferences</a>
            <a href="#" className={styles.footerLink}>🔗 Your Privacy Choices</a>
          </div>
        </div>
        
        <div className={styles.copyright}>
          © Copyright 2025 Stratosuite, Inc. All rights reserved. Various trademarks held by their respective owners. Stratosuite, Inc. Stratosuite Tower, 415 Mission Street, 3rd Floor, San Francisco, CA 94105, United States
        </div>
      </div>
      
      <div className={styles.trustBadge}>
        <div className={styles.trustIcon}>🛡️</div>
        <div className={styles.trustText}>
          <div>TRUSTe</div>
          <div>Verified Privacy</div>
          <div>Powered by TrustArc</div>
        </div>
      </div>
    </div>
  );
};

export default WatchDemo;

src/vite-env.d.ts:
/// <reference types="vite/client" />

tailwind.config.ts:
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}"],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          hover: "hsl(var(--primary-hover))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        // Stratosuite Product Colors
        "agent-purple": "hsl(var(--agent-purple))",
        "small-business-teal": "hsl(var(--small-business-teal))",
        "sales-green": "hsl(var(--sales-green))",
        "service-pink": "hsl(var(--service-pink))",
        "marketing-orange": "hsl(var(--marketing-orange))",
        "commerce-green": "hsl(var(--commerce-green))",
        "ai-blue": "hsl(var(--ai-blue))",
        "data-purple": "hsl(var(--data-purple))",
        "platform-indigo": "hsl(var(--platform-indigo))",
        "slack-purple": "hsl(var(--slack-purple))",
        "analytics-red": "hsl(var(--analytics-red))",
        "mulesoft-blue": "hsl(var(--mulesoft-blue))",
        "heroku-purple": "hsl(var(--heroku-purple))",
        "success-teal": "hsl(var(--success-teal))",
      },
      backgroundImage: {
        "gradient-hero": "var(--gradient-hero)",
        "gradient-purple": "var(--gradient-purple)",
        "gradient-blue": "var(--gradient-blue)",
        "gradient-teal": "var(--gradient-teal)",
      },
      boxShadow: {
        "card": "var(--shadow-card)",
        "card-hover": "var(--shadow-card-hover)",
        "button": "var(--shadow-button)",
      },
      transitionProperty: {
        "smooth": "var(--transition-smooth)",
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

tsconfig.app.json:
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

tsconfig.json:
{
  "files": [],
  "references": [{ "path": "./tsconfig.app.json" }, { "path": "./tsconfig.node.json" }],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}

tsconfig.node.json:
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

vite.config.ts:
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [react(), mode === "development" && componentTagger()].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));

